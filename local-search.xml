<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>綠島遊</title>
    <link href="/2024/08/travel-recollection/"/>
    <url>/2024/08/travel-recollection/</url>
    
    <content type="html"><![CDATA[<!-- Latex Protector: Remove "@" before use --><!--@lp:skip-all--><!--@lp:skip-some--><!-- EMSP Replacer: Auto replacement of double full-width white-space with &emsp;&emsp; --><!-- Spoiler Replacer: Replace ||text||  with <span class="spoiler" onclick="this.classList.toggle('spoiler')"><span class="spoiler-blur ">text</span></span> --><!--@sprp:skip-all--><!-- Footnote Reposer: Auto repositioning of all the footnotes in post --><!--@ft:skip-all--><h2 id="病情告知">病情告知</h2><p>筆者原本是看到某位朋朋許願才開始寫這篇文的，沒想到在快結尾時患上了嚴重的拖延症：原定開學就要發出來的拖了整整六個禮拜、甚至還草草結尾，在此磕 100 個大頭/(_ _)\。</p><h2 id="宅癌末期">宅癌末期</h2><p>筆者來清華後的日常生活大部分都充斥著學術相關，到暑假也不例外。戶外活動更是百年難遇。</p><p>在校園內患上暫時的E人朋友缺乏症、與物慾低下的副作用就是當條100%的宿舍蟲。</p><p>幸好，空曠的假期也讓筆者幾乎可以自由地參加周遭朋友圈的所有活動，逃離在家悶死的下場。</p><p>先來說說今年暑假都參加了什麼朋友團：</p><ol><li>高中學術團</li><li>中央宿舍團</li><li>國中旅行團</li></ol><p>首先，第一團的組成是由高中一起討論學術相關、或是有相關升學計畫的友人被高中班導共同約出來的群。</p><p>因為轉學經驗關係，今年被邀請去導師班上分享一下個申過程還有兩所大學的各面向比較。順便同步一下高中班上同學現況。</p><p>第二團則是跟之前中央室友兼朋朋的純聊天局，包括各自這學期修了什麼課、給分如何、還有觀察中央的卷度上升趨勢等。可惜其中一位去留學了這次沒參加到，過陣子去問問看他狀況owo。</p><p>第三團是從國中班上分化出一部分的同學與各自的一階關係人組成的旅遊群。這也是今天旅遊文的重心所在。</p><h2 id="旅途開始">旅途開始</h2><p>作為這次三天兩夜旅遊的目的地－綠島，是在今年初的就已經決定好的。但託颱風的福，這次的旅前計畫非常地多災多難。</p><p>總而言之，就是斷軌大禮包：東部斷軌，變成要先確認訂金拿不拿得回來。接下來是決定要從西邊繞整整一圈還是直接改地點：在漫長的的開會、以及考慮到其稀有性之下，大家最後選擇了前者。</p><p>然而，毫不意外地，嘉義附近的鐵路也斷了。導致預定的搭船時間如果早上才出發就會來不及，逼得全員凌晨搭客運南下，主打一個刺激。在此感謝朋朋家人的車uwub。</p><p>旅途就這樣非常緊湊地，在凌晨一點的北車客運總站啟程了。</p><h3 id="Day1">Day1</h3><p>客運上的確不好睡，過度刺激的通勤行程也導致筆者花了好一陣子才以逐漸不習慣的坐姿入睡。被叫醒時也是相當突然，過了幾分鐘人就出現在陰雨連綿、沒有半個人的無名地點，以睡眼惺忪的狀態漫步到南梓車站附近。早餐挑到了一家衛生中下，位置小擠，但食物還算可以，老板娘人不錯，離車站也非常近的<a href="https://www.google.com/maps/@22.7270733,120.3248101,3a,37.6y,3.49h,90.1t/data=!3m10!1e1!3m8!1skMiMrPq7WhWL4K1nocTgPQ!2e0!6shttps:%2F%2Fstreetviewpixels-pa.googleapis.com%2Fv1%2Fthumbnail%3Fcb_client%3Dmaps_sv.tactile%26w%3D900%26h%3D600%26pitch%3D-0.10251315522312154%26panoid%3DkMiMrPq7WhWL4K1nocTgPQ%26yaw%3D3.4927202819319985!7i16384!8i8192!9m2!1b1!2i24?coh=205410&amp;entry=ttu">美而美</a>。</p><p>擔心早餐吃太久帕敢不上車，快步趕進車站卻發現車停駛的我們又在月台上的椅子等了整整一小時，聽著朋友放的歌、感受自己蠕動著的腸胃、望著車站前後的建築、把潮州站副站長的各種熱血事蹟當 BGM 放空發呆，就這樣等到了火車來。在這短短的一站內，發生了火車上收著快爆炸的行李箱小插曲。</p><p>抵達新左營站等待轉車之前，全員跑到了某處的星巴克座位區群體補眠 + 買藥，筆者則是看起了 classical complexity analysis。殊不知待會上下火車後等待著大家的，只有窗外下著暴雨的台東周遭、炸雨炸到必須換下布鞋的台東車站、低血糖的肉體（幸虧有充當午餐的麵包）、以及因為要坐計程車前座，在短短一瞬間內就被淋成落湯雞的筆者。</p><p>乘船過程從各種方面來說也相當刺激：被告知搭船地點突然改了，疾走了10分鐘左右才搭上船，卻發現中間位置已經被坐滿，但重頭戲還在後面：船開動的那刻起，只能用地獄來形容。</p><p>當天浪高約2公尺，深知自己易暈體質的筆者選擇把注意力放在同步窗外浪高、自身感覺、以及克服失重感的呼吸調整上。殊不知浪週期太短，頻繁換氣帶來的就是全身從裡到外的麻痺感。</p><p>背景奏著此起彼落永不停歇的乾嘔與嘔吐聲，以及逐漸變酸的空氣。只能說：此生難得一見 <span class="spoiler" onclick="this.classList.toggle('spoiler')"><span class="spoiler-blur ">再體驗一次就殺了我吧</span></span>。最終在筆者已經快向蔓延到頸部的不適感屈服時，船也剛好到岸了，終究是沒得成為下一位將手伸向塑膠袋束的人類。</p><p>到綠島後即刻前往民宿 check-in 躺平恢復下體力，順便刷個遲來的牙。在機車環島前還加入了抽機車鑰匙小活動，只能說筆者比預期中還快就適應了這新奇體驗。快速帶過環島體驗：</p><p>到將軍岩拍了神奇的小短片，最後以半成品告終<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="這影片到現在都沒出現在相簿中">[1]</span></a></sup>。騎到新生訓導處展示館發現甚麼咚咚也沒有，往前騎又遇到死路，只能原路折返走山路。到<a href="https://maps.app.goo.gl/kD3hFVY5Ga7zv6nA8">觀音洞</a>參觀了一下，每人一瓶海燕窩，好喝，但除了紀念品商店之外沒有好逛的地方<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="想探險的話有黑漆漆的步道 + 山洞任君挑選">[2]</span></a></sup>。上到山頂發現了小長城<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="筆者現在來查地圖才發現它真的叫小長城耶">[3]</span></a></sup>，但某人卻待在停車處不來爬，幫他拍了張遠距離美照(?)。接下來就是拍拍走走地繞完了剩下的3/5圈。</p><p>晚餐大家挑了一家還可以的<a href="https://maps.app.goo.gl/mxajAZw7BjCoee5PA">泰式料理</a>。為打發等待時間，去逛了逛<a href="https://maps.app.goo.gl/BRcDZNWM2r91iDNT8">嶼衣</a>，順手買了件<s>筆者最後沒用到的</s>泳帽。</p><p>晚上原本要跑去泡朝日溫泉，但這一天下來筆者已經累到快死了，所以果斷棄權。洗完澡滑個平板後，就跑去跟被窩做好朋友了。<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="兩小時後被吵起來看個 polynomial-time reduction type 之後又一起點了早餐才回去睡覺又是另一件事了">[4]</span></a></sup></p><p>第一天以聽著某人少說有 50 分貝的打呼聲<s>安穩</s>入睡。</p><h3 id="Day2">Day2</h3><p>正是因為今早10.就要去浮淺，所以全員昨天才沒怎麼熬夜。早上跟朋朋拿早餐回來後誤以為早餐店沒放餐具 <span class="spoiler" onclick="this.classList.toggle('spoiler')"><span class="spoiler-blur ">其實壓在最下面</span></span>，害他淋著暴雨又往返了一趟，大抱歉QQ。浮淺體驗相當新奇，只是飄了快15分鐘之後易暈症又犯了，所以後半部都在胡言亂語 + 品嘗海水 <span class="spoiler" onclick="this.classList.toggle('spoiler')"><span class="spoiler-blur ">苦爛</span></span>。</p><p>中午原本要去吃的 <a href="https://maps.app.goo.gl/nMSqESjF4mH6Mqt36">In Egg 早午餐</a>停止接客了，所以選了<a href="https://maps.app.goo.gl/MLCea5U7LZHGcFo99">綠島哈嘍木木</a>，社牛朋朋直接跟老闆家打起寶可夢道館了，吃完還發現他們家有貓＋狗，大家就在那撸了半天才走。</p><p>吃完之後馬上開啟今日份的環島之旅，立刻殺到白色恐怖綠島紀念園區逛逛。因為筆者討厭聽攏長的介紹，所以就自己跟一位朋朋把園區直接逛完後就回來門口等其他人了。聊天過程中還看到突發事件：其它紅衣<span class="spoiler" onclick="this.classList.toggle('spoiler')"><span class="spoiler-blur ">帽？</span></span>觀光團的某位遊客和綠島當地人互看不爽，差點打起來，氣氛指數級下降。</p><p>下一站是去島後面吃冰。真不錯吃，而 BGM 也是筆者覺得稱得上記憶與情感載體的<a href="https://youtu.be/IfOaTNIocgI?si=vcbuME3ioyGVvQT4">インク</a>。想當然爾又是拍了成堆的網美照，全員悠哉地帶著被藍柑橘上色的嘴唇、舌頭與心靈離開。</p><p>接下來主打個迴力鏢行程：原路折返回柚子湖拍極具特色的強烈背光照。鮮少拍照的筆者就在一旁無聊觀察地上，全是多孔低密度的珊瑚骨碎沙。原本打算去大白沙看日落，可惜因為又要折返一次，所以趕到時已經過日落時間了。但玩水和成堆的網美照依然不可少。</p><span class="spoiler" onclick="this.classList.toggle('spoiler')"><span class="spoiler-blur ">Αταξία Μνήμης</span></span><p>夜跑去了昨天的小長城入口處的涼亭觀星，筆者這台 A53 在拍照上顯然是不怎麼樣，但還是有拍到星空。觀到一半赫然發現逐漸逼近的烏雲，就快速溜下山了。</p><p>晚餐局選了離這次民宿很近的<a href="https://maps.app.goo.gl/gW7k9BjZMheKcDN76">歸海食堂</a>。環境、氣氛、與服務都蠻好的，唯獨主餐在調味上稍微有點膩。不喝酒的筆者除外，全員都點了杯特調。筆者則是點了杯朝思暮想的薑汁汽水，有著強烈的木質前調、淡淡薑味後韻，還算好喝。調酒師甚至會親自上來問品後感想，並揭曉各自的調酒方式，順帶跟我們聊下天。<sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="不得不說朋朋的███雷達是真準">[5]</span></a></sup></p><p>回民宿後還發生了回程船票不見去翻一整大袋垃圾袋，結果最後發現安穩躺在錢包裡的神奇突發狀況。</p><p>筆者作為旁觀者 &amp; 計時人員看其他人玩著相當之有趣的《瞎掰王》桌遊；嬉鬧聲之大，隔壁的客人沒來敲門簡直是奇蹟。一不小心跑去讀量運回過神來時，發現他們已經配著美酒，玩起真心話大冒險了。其中幾個大冒險包括但不限於：凌晨三點半發張比愛心＋肉麻旁白照傳到國中班群，吵大家起床重睡、學奇怪影片裡的動作、退追█████的██（還是███筆者忘了）、用力████的██。真心話部分被禁錮在綠島上了，無法提供嚕owo。</p><p>後來氣氛炒得太熱烈了，筆者就像飛蠅撲火般加入戰局了。最後玩累決定入睡時天都已經泛起薄薄一層魚肚白了，依舊是在有某人的打呼聲作為伴奏的狀態下安穩入眠。</p><h3 id="Day-3">Day 3</h3><p>早上起床第一件事：完美的錯過早餐，樂極生悲。所以全員出發前往 In Egg 雪昨天沒吃到的恨。店內部非常神奇，明明外觀是鐵皮屋卻還能相當涼快。因為怕稍後坐船回程時悲劇上演，筆者只點了份某個口味的螺旋丸，沒加點飲料。出餐稍微有點慢，但還不錯吃。</p><p>回程風平浪靜，甚至在船上睡到流口水。唯獨筆者大雷包理解錯台鐵發的公告，變成大家最後還是要乖乖從左半邊繞回台北，回程上除了通勤、吃、算錢、通勤、吃、算錢之外就沒事做了，平平安安的結束這次的三天三夜之旅 \^~^/。</p><div class="note note-info">            <p>爛尾了，沒放照片也沒下文嚕owo</p>          </div><h2 id="參考">參考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>這影片到現在都沒出現在相簿中<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>想探險的話有黑漆漆的步道 + 山洞任君挑選<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>筆者現在來查地圖才發現它真的叫小長城耶<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span>兩小時後被吵起來看個 polynomial-time reduction type 之後又一起點了早餐才回去睡覺又是另一件事了<a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span>不得不說朋朋的███雷達是真準<a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Re:從零開始的量子生活</title>
    <link href="/2024/08/quantum-revisit/"/>
    <url>/2024/08/quantum-revisit/</url>
    
    <content type="html"><![CDATA[<!-- Latex Protector: Remove "@" before use --><!--@lp:skip-all--><!--@lp:skip-some--><!-- EMSP Replacer: Auto replacement of double full-width white-space with &emsp;&emsp; --><!-- Spoiler Replacer: Replace ||text||  with <span class="spoiler" onclick="this.classList.toggle('spoiler')"><span class="spoiler-blur ">text</span></span> --><!--@sprp:skip-all--><!-- Footnote Reposer: Auto repositioning of all the footnotes in post --><!--@ft:skip-all--><h2 id="前言">前言</h2><blockquote><p>欸好久沒看 re:zero 了，等等寫完來看</p></blockquote><p>在高中時期，筆者曾經在只有一絲絲線代知識下自學過量子運算（Quantum Computing, QC），還順便想出了以下這量子態的製備演算法（Quantum State Preparation, QSP），量子核心部分複雜度粗估 $O(\log^2N)$。<span class="spoiler" onclick="this.classList.toggle('spoiler')"><span class="spoiler-blur ">隨手算的，60% 會錯(?)</span></span></p><p>$$\ket{\psi} = \frac{1}{\sqrt{N}} \sum_{k=0}^{N-1}\ket{k},\ N \in \mathbb{Z}^+$$</p><p>但在沒有完備數學底子之下，那時候的能力已經達到瓶頸了，所以之後數年都沒有再認真碰過。直到大二上學完線代。</p><h2 id="正文">正文</h2><p>原本預計大二下來看之前的上課影片的計畫被打亂後，終於可以在平靜的暑假來實現這項事情了。</p><p>量運基本上整個基底都是由線代 + 量物相輔而成的 <span class="spoiler" onclick="this.classList.toggle('spoiler')"><span class="spoiler-blur ">幸好量運沒有太多量物(?)</span></span>。所以扎扎實實學完線代再來挑戰量運，在理解速度上顯然是有很大差距。</p><h3 id="筆記分享">筆記分享</h3><div class="note note-info">            <p>在學 Dirac Notation、Quantum Mechanics postulates and measurements 這幾個章節時因為還沒入手平板，所以沒留下筆記痕跡。</p>          </div><blockquote><p><a href="https://drive.google.com/drive/folders/1rRyHE9to2wZODhvhZ-U_Lv1r56FOMNON?usp=sharing">筆記連結</a></p></blockquote><h3 id="一些心得">一些心得</h3><ol><li><p>測量的數學定義比預期中還要難很多，種類也很多種，到現在可能還不太熟練</p></li><li><p>密度算子部分又遇到了機率老朋友，真的很難轉回來</p></li><li><p>在密度算子證明偶而會遇到黑魔法，雖然已經問過一遍了但還是沒很懂，開學後再去問問</p></li><li><p>Arbitrary unitary gate 的造價也太昂貴，$O(n^2 2^{2n})$ 是甚麼鬼，$O(n^2 2^{2n})$ 耶</p></li><li><p>Permutation chain 的概念是好咚咚，說不定之後會用到</p></li><li><p>Simon’s 意外地難，但相同概念也可以套到 Order finding 的第二種看法上，習慣啦</p></li><li><p>QFT 之後又出現一堆黑魔法了，還有一堆不知名的 theorem &amp; lemma</p></li><li><p>Shor 比想像中還要簡單非常多，基本上要做的事都由 classical 做完了，只是用 quantum 來加速一下 order finding 的部分而已</p></li><li><p>筆者自己習慣用的 phase notation 簡寫竟然跟 wiki 上的一樣，再次證明筆者就是 wiki (X)。</p></li></ol><h2 id="後記">後記</h2><p>截至寫這篇文的現在，筆者還剩下大約兩個禮拜的課要看，基本上開學後一開始都可以先看看要不要看 paper 或是拿來讀其他科的咚咚了，大歡喜。</p><p>但有些東西感覺學太快所以還沒打好基礎，反正筆者學習習慣都是先碰然後放置消化，所以也沒啥大不了。</p><p>反正開學後班上有人要組團學，筆者的台大物理朋朋好像也要來學，到時候再去抱大腿uwu。</p><p>至於暑假旅行文…再看看嚕，太不習慣寫這種咚咚了，說不定拖到開學才會出來也說不定。</p><p>那就，先醬 owob。</p>]]></content>
    
    
    
    <tags>
      
      <tag>life</tag>
      
      <tag>quantum</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小憩</title>
    <link href="/2024/06/kyuukei/"/>
    <url>/2024/06/kyuukei/</url>
    
    <content type="html"><![CDATA[<!-- Latex Protector: Remove "@" before use --><!--@lp:skip-all--><!--@lp:skip-some--><!-- EMSP Replacer: Auto replacement of double full-width white-space with &emsp;&emsp; --><!-- Spoiler Replacer: Replace ||text||  with <span class="spoiler" onclick="this.classList.toggle('spoiler')"><span class="spoiler-blur ">text</span></span> --><!--@sprp:skip-all--><!-- Footnote Reposer: Auto repositioning of all the footnotes in post --><!--@ft:skip-all--><h2 id="小談">小談</h2><p>呼…</p><p>上一篇文章的日期已是整整一個學期前了，如此久沒寫 blog，背後原因並非三言兩語可道盡，讓筆者在下文娓娓道來。</p><h3 id="課業">課業</h3><p><img src="course.avif" alt="這 loading 完全不是 18 學分的量啊"></p><p>  總之，筆者這學期碰上了兩門相當硬的課，所以自學期初的幾個禮拜開始，就被作業 + project 接連疲勞轟炸，安排好的 QC 學習計畫不得不被擱在一邊；直到現在才可喘息，重新拾起 QC 進度<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="複習花了整整一整天 QQ">[1]</span></a></sup>。</p><p>  上述的罪魁禍首中，首當其衝的就是<s>週期性大魔王</s><strong>軟體設計與實驗</strong>。這課進度飛快、作業接連不斷，每個作業都需要整整 1~2 個禮拜的時間完成，在剛寫完的下堂課上又會公佈下一個作業；最後的作業甚至跟 final project 的時間重疊，這程度完全對得起<a href="https://home.gamer.com.tw/artwork.php?sn=5200745#:~:text=%E6%B6%BC:-,1.5">涼度只有1.5的評分</a>。</p><p>附上幾張血與淚的證明（光是寫程式的時數就來到了可怕的 123 小時<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="成功讓在 wakatime 上紀錄的總 coding time 破 1000 小時大關 \\^~^/">[2]</span></a></sup>）：</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="hw1.avif" alt=""></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="midterm_proj.avif" alt=""></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="hw2.avif" alt=""></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="final_proj.avif" alt=""></div></div></div><p>  而原本應該用於處理 final project 的時段又跟毒物學的期末報告衝突，不得不整整一個禮拜都泡在露易莎和夜讀區，處理掉期末報告出關後才好應對 final project。這樣做的後果，就是僅剩下一個禮拜的時間可以寫 final project，至今都不知道那時是怎麼撐過來的（暈。</p><p>  學期中後期教的遊戲引擎<span class="spoiler" onclick="this.classList.toggle('spoiler')"><span class="spoiler-blur ">Cocos</span></span>用起來也不甚滿意：基礎 2D 物理碰撞判定有 bug、生態圈相當封閉、文檔感覺也不夠完善<span class="spoiler" onclick="this.classList.toggle('spoiler')"><span class="spoiler-blur ">、更不用說根本就是 Unity 的翻版</span></span>。前期用起來比較像為了融合學期前半段所教的 JS/TS、亦或是避免與另一門遊戲設計課的內容衝突而硬用。幸虧磨合期過了之後還是多多少少能適應的。</p><p>  另外，上述那篇心得文中的「不調分」形同虛設，因為一開始的給分就相當高。筆者這組的 final project 甚至拿到了 99.13 分，這是從二上到現在第一次看到學期成績給滿分的課，甜爛。</p><p>  與此相對，真不調分的課就非 <strong>機率</strong> 莫屬；有用的東西是學到了，唯獨遺憾太多，只能用個 <strong>唉</strong> 來帶過。</p><p>  第二位罪魁禍首即計算機結構。這堂課就沒 <strong>軟體設計與實驗</strong> 那麼誇張了，但出作業頻率同樣相當緊湊<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="至少寫/檢查各只要半天就可以處理完成">[3]</span></a></sup>；主要是筆者原本就對硬體相關內容不太感興趣、加上期中期末考謎題般的給分標準、以及第一位罪魁禍首在後期帶來的威壓、佐上炸開的期末成績，讓筆者最後覺得課程 CP 值或許沒那麼高，但考慮到教授教得相當用心，就不再多說 owo。</p><div class="note note-warning">            <p>抱怨一下：從學期成績來看，這堂課評分標準真的很謎，CP 值驟減</p>          </div><blockquote><p>突然發現這篇文已經變成課程評價文了，就順其自然吧 &amp;^&amp;</p></blockquote><p>  說點比較開心的事：普物的成績一如往常地甜到可以讓人得 DM；雖然筆者在學期中後大量實施報復性熬夜，所以去上課的頻率直接少了 70%，然後期末因為要處理其他緊急科目直接放推<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="沒錯，**軟實**，就是在說你">[4]</span></a></sup>，最後也毫無意外地炸掉了。所以肯定是期中的好成績在撐著，感謝期中時期的自己 /(_ _)\。</p><p>  這學期也終於修到體育課了<sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="雖然畢業門檻上還有整整五次體育課要修，遙遙無期">[5]</span></a></sup>，做為少數可以逃離沉重課業的時段，課堂氛圍也很輕鬆。雖然上了一學期網球之後還是沒打得多好，但總之是開心的一堂課 uwu。</p><p>  最後來說一下期末報告都做了些甚麼：毒物學期末報告的內文頁數門檻是恐怖的25頁，最後是無意間看到 <em>志祺七七</em> 的腎臟影片才決定以此作為主題，閉關一個禮拜後終於得到一篇 10000 多字的期末報告。由於是自主研究，所以過程中學到很多知識<sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="看了一堆醫學期刊，相當新奇 owo">[6]</span></a></sup>，皆大歡喜。</p><div class="note note-danger">            <p>抱怨一下：這報告最後只被評個 80 分，認真？</p>          </div><p>  粒子物理則是因為發現 Majorana fermion 跟拓撲量子電腦有些關係，就研究了一番。此外，內文還限定在兩頁之內，所以做起來實在是相較毒物學輕鬆多了。</p><h3 id="生活">生活</h3><p>來說說從上次那篇文到現在都發生了甚麼有趣的東東吧。</p><h4 id="寒假">寒假</h4><p>  南部山區七日遊，去了一堆地方、走了一堆步道<sup id="fnref:7" class="footnote-ref"><a href="#fn:7" rel="footnote"><span class="hint--top hint--rounded" aria-label="第一天就走了好像6還10公里，試問心理陰影面積">[7]</span></a></sup>、露了一堆的營。最後受不了一直在山上跑，重返嘉義文化路吃拜訪一下必吃的鴨肉羹麵uwu，最後再一路玩回台北。特別推一下<a href="https://maps.app.goo.gl/aRcsEWHcit6GEnPKA">悅日松林</a>這個露營區，是那幾天住過的露營區中品質最好的。</p><p>附上幾張照片～</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="star.avif" alt="在露營區拍的星空"></div><div class="group-image-wrap"><img src="height_3528.avif" alt="懶人走到這邊就夠啦"></div></div></div><h4 id="學期內">學期內</h4><p>二月</p><ul><li>開學第二天就經歷 <strong>大起大落大落大落大落大起大起平平平小起大起大落</strong><sup id="fnref:8" class="footnote-ref"><a href="#fn:8" rel="footnote"><span class="hint--top hint--rounded" aria-label="其中一個大落是發現上學期服學被當所以沒書卷可領了；這學期服學也發生類似的事，直接果斷二退。決定賭一下教育部發的那篇畢業門檻公文。">[8]</span></a></sup>，對心臟非常不好，壽命差點銳減十年。</li><li>月底把寒假時一直拖欠的 Frieren 動漫 + 漫畫捕到最新進度，爽爽的uwu。</li><li>順利找到指導教授了，讚讚 ouob。</li></ul><p><img src="frieren.avif" alt="無情的 Frieren 觀看機器"></p><p>三月</p><ul><li>樂極生悲，得到本學期第一次鼻竇炎 QQ。</li><li>一年半前打算要組的樹梅派那時才來，光速組好，卻發現需要它的時間點已經過了<sup id="fnref:9" class="footnote-ref"><a href="#fn:9" rel="footnote"><span class="hint--top hint--rounded" aria-label="現在還在宿舍裡待機生灰，找時間跑個 daemon 好了。">[9]</span></a></sup>。</li><li>月中時開始被作業轟炸，接下來都在活在寫作業和讀書之間，頗無聊。</li><li>月底時終於買台路由器了 \^~^/，上學期修的計算機網路概論在理解上確實有幫到忙。</li><li>同時月底也被星鐵的劇情 boss 打得直接爆氣，但最後還是用了整整一個小時順利磨過去了。（嗚</li></ul><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="barry.avif" alt=""></div><div class="group-image-wrap"><img src="router.avif" alt=""></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="defeat.avif" alt="戰敗"></div></div></div><p>四月</p><ul><li>月初發現三商巧福已經漲到筆者吃不起的低 CP 值程度了，從此之後就沒去吃過它了。（氣耶</li><li>同時段被家人傳染到類流感，被折磨了一兩個禮拜，每天心安理得地當隻瞌睡蟲。</li><li>月中時發現自己其實就讀寫作業大學，無奈。從這之後就開始被課業疲勞轟炸。</li></ul><p><img src="todo.avif" alt="被塞爆的todo"></p><p>五月</p><ul><li>又感冒了，而且還是病毒性，引起本學期第二次鼻竇炎<sup id="fnref:10" class="footnote-ref"><a href="#fn:10" rel="footnote"><span class="hint--top hint--rounded" aria-label="真是感謝我的鼻竇構造，之後肯定要去照照 X 光">[10]</span></a></sup>。</li><li>其餘的時間照樣被課業填滿，毫無樂趣可言。</li></ul><p>六月</p><ul><li>弄完一堆期末報告、final project、期末考後，如今終於從地獄裡面爬出來，安安心心當坨只會呼吸的肉<sup id="fnref:11" class="footnote-ref"><a href="#fn:11" rel="footnote"><span class="hint--top hint--rounded" aria-label="雖然後天還有英文期末的份，但有讀有分">[11]</span></a></sup>。</li><li>卻發現以前常吃的冰棒也一同加入三商巧福的行列了 QQ。</li></ul><p>  總之，首先明顯感覺到的就是看電腦時數暴增了，成天窩在宿舍打 code，搞得現在視力不如往常；希望這現象得以在下一學期有所減輕。再來，就是課程上用到數學的機會越來越少、要記的架構占比越來越多，導致學起來不是很帶勁。</p><p>  相信只要不再遇到像軟實一樣的課，肯定可以把有意義/有趣的行程融入生活中，壓力間接造成的感冒或許也會少一點（累癱。</p><hr><p>好啦，那就先醬。</p><p>如果之後有想到還有甚麼沒講，或許會出現下一篇也說不定。</p><p>先去繼續睡覺啦 Zzzz…</p><hr><p>Photo by <a href="https://unsplash.com/@kstonematheson?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Kate Stone Matheson</a> on <a href="https://unsplash.com/photos/white-cat-sleeps-under-white-comforter-uy5t-CJuIK4?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Unsplash</a></p><h2 id="註腳">註腳</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>複習花了整整一整天 QQ<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>成功讓在 wakatime 上紀錄的總 coding time 破 1000 小時大關 \^~^/<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>至少寫/檢查各只要半天就可以處理完成<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span>沒錯，<strong>軟實</strong>，就是在說你<a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span>雖然畢業門檻上還有整整五次體育課要修，遙遙無期<a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span>看了一堆醫學期刊，相當新奇 owo<a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:7" class="footnote-text"><span>第一天就走了好像6還10公里，試問心理陰影面積<a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:8" class="footnote-text"><span>其中一個大落是發現上學期服學被當所以沒書卷可領了；這學期服學也發生類似的事，直接果斷二退。決定賭一下教育部發的那篇畢業門檻公文。<a href="#fnref:8" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:9" class="footnote-text"><span>現在還在宿舍裡待機生灰，找時間跑個 daemon 好了。<a href="#fnref:9" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:10" class="footnote-text"><span>真是感謝我的鼻竇構造，之後肯定要去照照 X 光<a href="#fnref:10" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:11" class="footnote-text"><span>雖然後天還有英文期末的份，但有讀有分<a href="#fnref:11" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>抽象代數小旅行</title>
    <link href="/2024/02/abstract-algebra-trip/"/>
    <url>/2024/02/abstract-algebra-trip/</url>
    
    <content type="html"><![CDATA[<!-- Latex Protector: Remove "@" before use --><!--@lp:skip-all--><!--@lp:skip-some--><!-- EMSP Replacer: Auto replacement of double full-width white-space with &emsp;&emsp; --><!-- Spoiler Replacer: Replace ||text||  with <span class="spoiler" onclick="this.classList.toggle('spoiler')"><span class="spoiler-blur ">text</span></span> --><!--@sprp:skip-all--><!-- Footnote Reposer: Auto repositioning of all the footnotes in post --><!--@ft:skip-all--><h2 id="前言">前言</h2><p>  筆者寒假時從書堆裡挖出來了很久以前買已經生灰塵的《數學女孩：伽羅瓦理論》，決定重看一遍之前一直卡關的地方<span class="spoiler" onclick="this.classList.toggle('spoiler')"><span class="spoiler-blur ">說不定有機會看完整本？</span></span>。筆者之前在體論的部分就卡得死死的了，後面的群論也只是掃過去根本沒看懂。如今來測試看看筆者的理解能力到哪裡了 owo。</p><p>  直接跳結論：最後還是沒看完 QQ，但至少體論的部分概念已經懂了；群論因為有點小難所以最近還在從基礎看起（但時間又被量子運算搶走了）。不過在過程中也讀懂了在高中時期從來沒學過證明的兩個有名問題的證明：三等分角與倍立方，算是頗有收穫。</p><h2 id="正文">正文</h2><div class="note note-info">            <p>因為筆者太懶了，所以下文會跳過體&amp;體擴張的概念 owo</p>          </div><h3 id="尺規作圖支援的體態">尺規作圖支援的體態</h3><p>  因為尺規作圖可以支援加減乘除（用某些神奇的方式）與開根號運算，所以其支援的體 $\mathbb{F}$ 即為：</p><p>$$\mathbb{F} = \mathbb{Q}\left ( \sqrt{\cdot} \right ) = \mathbb{Q}(\sqrt{n_1})(\sqrt{n_2}) \cdots (\sqrt{n_\infty})\\\text{denote } \mathbb{Q}_0=\mathbb{Q},\, \mathbb{Q}_k = \mathbb{Q}_{k-1}(\sqrt{n_k})\\\text{where } \mathbb{Q}_k \neq \mathbb{Q}_{k-1}\, \forall\, k \geq 1$$</p><p>根據 Finite Extension Theorem<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="其實筆者不確定這個定理的名稱是不是這個，甚至不確定它有沒有名字 owo，但因為頗符合的就先用(?)">[1]</span></a></sup>，我們可以得知 $\left [ \mathbb{F}:\mathbb{Q} \right ]$（也就是這個體相對於 $\mathbb{Q}$ 的擴張度數）為 $2^n$，證明如下：</p><p>$$\begin{align*}\left[ \mathbb{Q}_k:\mathbb{Q} \right] &= \prod_{i=1}^{k}\left[ \mathbb{Q}_i:\mathbb{Q}_{i-1} \right]\\&= \prod_{i=1}^{k}2\\&= 2^k\end{align*}$$</p><h3 id="任意三等分角的解屬於的體態">任意三等分角的解屬於的體態</h3><p>我們可以使用 $\cos$ 或是 $\sin$ 的三倍角公式來反推出 $\cos(\theta/3)$ 所在的解集體態為何：</p><p>$$\begin{align*}\cos(3\theta) &= 4\cos(\theta)^3 - 3\cos(\theta)\\\Rightarrow \cos(\theta) &= 4\cos\left(\frac{\theta}{3}\right)^3 - 3\cos\left(\frac{\theta}{3}\right)\end{align*}$$</p><p>其中的 $\cos(\theta)$ 為已得知的數；而 $\cos(\frac{\theta}{3})$ 不知，令個別為 $a,\ x$ 得出方程式：</p><p>$$4x^3-3x-a=0$$</p><p>因此，如果我們能用尺規作圖創造出 $\mathbb{Q}\left(\cos(\frac{\theta}{3}) \right) = \mathbb{Q}(x)$ 這個體，即可用尺規作圖表達這個解。在這之前，我們先試算一下 $\left[ \mathbb{Q}(x):\mathbb{Q} \right]$ 為何。</p><p>為此，需要用到上面的方程式。注意到這個方程式在 $\mathbb{Q}$ 中是不可約的，因此它為解 $x$ 的最小多項式。因此，我們可以將</p><p>$$B = \left\{ 1, x, x^2 \right\}$$</p><p>作為基底，對 $\mathbb{Q}$ 進行擴張。為此，需要提到一下如何從上方的最小多項式提取出線性代數中的「線性獨立」資訊；我們先將這條方程式改變一下樣貌：</p><p>$$(-a)\cdot 1 + (-3)\cdot x + 0\cdot x^2+4\cdot x^3=0$$</p><p>這即符合「線性相依」的概念；而如果在<strong>度數不到 3 之前</strong>都沒有符合的方程式（因不可約），代表：</p><p>$$\nexists\ a_{i's} \neq 0\ni \sum a_i\textbf{b}_i=0,\ \textbf{b}_i \in B$$</p><p>因此，$B$ 為線性獨立。</p><p>回歸此擴張的度數：因 $|B| = 3$，因此 $\left[ \mathbb{Q}(x):\mathbb{Q} \right] = 3$。</p><p>如果我們可以用尺規作圖做出這個體，代表</p><p>$$\mathbb{Q}(x) = \mathbb{F}$$</p><p>然而</p><p>$$\left[ \mathbb{Q}(x):\mathbb{Q} \right] = 3\\\left[ \mathbb{F}:\mathbb{Q} \right] = 2^k$$</p><p>$$\text{Since } \nexists\ k \in \mathbb{Z} (2^k = 3)\, \rightarrow\leftarrow\\\Rightarrow \mathbb{Q}(x) \neq \mathbb{F}\ _\blacksquare$$</p><p>因此，尺規作圖無法做出這個解，因而無法實現任意三等分角。</p><h3 id="倍立方的解屬於的體態">倍立方的解屬於的體態</h3><p>這個跟三等分角的差別只有這個問題的最小多項式為</p><p>$$x^3-2=0$$</p><p>遵循跟上面一樣的步驟就可得出解集體的擴張度數也為 3，同樣帶向矛盾。因此無法作圖。</p><h2 id="後記">後記</h2><p>  感謝物理系朋朋教我商群還有推薦給我群論的 yt 影片，前者的 Corollary 實屬 N 年前完全搞不懂的東東，但現在懂了就爽爽的 uwu。</p><p>那就，先醬。</p><hr><!-- ## 參考 --><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>其實筆者不確定這個定理的名稱是不是這個，甚至不確定它有沒有名字 owo，但因為頗符合的就先用(?)<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>mafs</tag>
      
      <tag>life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>資料結構專題 - 論文查詢</title>
    <link href="/2024/01/ds-final-project-2023/"/>
    <url>/2024/01/ds-final-project-2023/</url>
    
    <content type="html"><![CDATA[<!-- Latex Protector: Remove "@" before use --><!--@lp:skip-all--><!--@lp:skip-some--><!-- EMSP Replacer: Auto replacement of double full-width white-space with &emsp;&emsp; --><!-- Spoiler Replacer: Replace ||text||  with <span class="spoiler" onclick="this.classList.toggle('spoiler')"><span class="spoiler-blur ">text</span></span> --><!--@sprp:skip-all--><!-- Footnote Reposer: Auto repositioning of all the footnotes in post --><!--@ft:skip-all--><h2 id="前言">前言</h2><p>  筆者這學期的眾多系必修中有著一堂對資工系來說很重要卻也很難的課 —— 資料結構。撇除小考不談，上機考的難度要花大約 1/3 學期適應；期中末考更是不用說，直接被炸死。所以現在期末專題就從加分項變成救命項了 owo。</p><div class="note note-info">            <p>成績公布後的筆者：結果幸好期末考沒有炸得很厲害，還沒調分前就已經在 A+ 的底了 uwu。</p>          </div><h2 id="介紹">介紹</h2><h3 id="功能">功能</h3><p>  資結大魔王在學期末要用 C++ 做一個 CLI 的論文查詢器作為專題，簡而言之就是搜尋引擎。這個引擎要可以在輸入資料集後，應付使用者的多種查詢指令：包含準確（exact）、前綴（prefix）、通配符（wildcard）、以及後綴（postfix）查詢；指令之間也要可以進行聯集、交集、差集運算，以滿足使用者的使用需求。程式執行時間限時 4 秒。</p><h3 id="輸入輸出">輸入輸出</h3><p>輸入由資料集與指令檔組成：</p><ul><li>資料集：一個資料夾，其中包含多個 txt 格式的論文資訊。（約 1000 ~ 9000 筆）</li><li>指令檔：一個 txt 檔，其中有多行查詢指令。（約 200 筆）</li></ul><p>輸出只有一個 txt，要包含所有指令的查詢結果。（最多可以到 20 萬筆輸出）</p><h2 id="思路">思路</h2><h3 id="基礎方向">基礎方向</h3><h4 id="資料結構">資料結構</h4><p>  最基本的方案即是使用 <strong>字典樹－trie</strong> 這個資料結構（筆者都念 try）。trie 在經過一些修改後都可以應付多種指令；唯獨通配符查詢的時間複雜度看起來有點不妙。所以筆者去查了些資料試圖優化。</p><p>  筆者在搜索通配符查詢適合的資料結構後<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://stackoverflow.com/questions/2815083/efficient-data-structure-for-word-lookup-with-wildcards">[1]</span></a></sup>，發現 DAWG（directed acyclic word graph）不只同時支援 trie 的功能，且比 trie 佔更少記憶體空間，在進行通配查詢時可降低搜尋複雜度<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://dl.acm.org/doi/pdf/10.1145/42411.42420">[2]</span></a></sup>。但問題是：從 trie 建出 DAWG 的過程昂貴、複雜、又有插入時必須要以字典序輸入的額外條件，無法搭配這次專題要實作的線上演算法。因此筆者仍然選用一開始的 trie 進行實作，決定跑出來後再看看需不需要補救。</p><h4 id="運作邏輯">運作邏輯</h4><p>程式整體的運作順序大約被劃分成三大步驟：</p><ol><li>讀檔 - 從資料集讀入單字</li><li>建樹 - 建出兩棵 trie，一棵應對 exact, prefix, wildcard 搜尋；一棵專門進行 postfix 查詢</li><li>查詢 - 將指令讀入，並對各論文內文進行查詢後輸出符合論文的標題</li></ol><p>在前期尚未平行優化階段時，(1) 與 (2) 其實是同時進行的：每讀入一個字，就把它丟入兩棵 trie 中。但在後期的平行優化階段，這兩步會被細分並重複循環。</p><h3 id="撰寫">撰寫</h3><p>  在想好基本的撰寫方式後，筆者就開始了沒日沒夜的實作工作。那時候還正逢期末考前夕，筆者最後是先把基本程式都寫出來後才去讀期末，幸好還有時間 owo。</p><h3 id="優化">優化</h3><p>  寫好的程式肯定是要優化的，不然那時候筆者跑出來的速度肯定是連看都不能看：1000 筆的輸入就要跑 2 秒多。但優化靈感來自哪呢？那肯定就是跟同學一起討論了。</p><h4 id="從同學那得到的優化靈感">從同學那得到的優化靈感</h4><ol><li>捨去 suffix trie</li></ol><p>  其實一開始有段時間筆者是沒有注意到「postfix 就是反過來的 prefix」這點的，繞遠路用了 suffix tree 去做後綴查詢。但 suffix tree 的建置過程比 trie 還要貴很多，而且 suffix tree 也不是主要拿來做後綴查詢。這也是筆者一開始程式 1000 筆要跑 2 秒多的原因。</p><p>  後來在跟一位同學討論時，他提出了可不可以用一棵 trie + prefix 查詢的原理實現 postfix 查詢的想法。筆者想了想後發現確實可以，但沒辦法只用一棵 trie，必須要用另一顆倒過來的 trie 進行查詢，否則使用原生的 trie 反而要多做相當多步驟才能完成一次查詢。</p><ol start="2"><li>用 vector 作為答案集儲存容器</li></ol><p>  在單一個 trie node 的底下，會儲存著 <a href="https://zh.wikipedia.org/zh-tw/%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95">inverted index</a>。筆者直覺上使用了 unordered_set 作為容器。但筆者在後期跟另一位同學的討論過程發現：他雖然還沒有做任何優化，但他建樹的時間比筆者快了快 700ms。為何？</p><p>  筆者注意到他是使用 vector 作為容器。且在每次插入時會檢查最後一個數以避免重複插入。因此，要以這樣的方式與 set 有同樣的功能，那就是輸入要是有序的。另一方面，vector 的 <code>push_back</code> 速度遠比 set 的 <code>insert</code> 還要來得快。因此在筆者把跟這方面相關的容器都換成 vector 之後，一棵 trie 的建樹時間減少了 700 ~ 800ms，而 20 萬筆的指令輸出速度增加了一倍。果然還是不能小看 vector owo。</p><h4 id="筆者想到的優化方式">筆者想到的優化方式</h4><ol><li>parallel</li></ol><p>  平行其實是筆者最直覺的優化方式。問題是筆者根本沒學過 C++ 的平行究竟要怎麼寫，且在學完開始實作時又因為炸了一堆 segmentation fault 而讓筆者自我懷疑，究竟有沒有平行設計可以幫得上忙的地方。</p><p>  幸好，後來筆者有想到：與其在 trie 做插入時開整整 26 個 thread 下去跑以 a~z 為開頭的字而把記憶體搞爛，還不如同時建兩棵 trie 來得有效率。在這之後，筆者發現讀檔其實也很慢（讀 9000 個檔要差不多 600 ms），所以筆者就把原始流程以高階的平行設計角度改為：</p><ol><li>以批次為單位進行平行讀檔</li><li>循序式處理檔案資料以確保有序性</li><li>用處理完的資料平行建樹</li><li>重複 (1) ~ (3) 直到沒有資料要讀</li><li>循序式處理指令輸入</li></ol><p>  (5) 之所以沒有改成平行是因為設計上太繁雜了，要開 buffer 給兩棵 trie 作為指令輸入，返回時又因為有序性要放回對應的空位中，最後才能進行集合運算。而且指令處裡其實也才佔 100ms 左右，比起優化後只剩 500ms 的前置流程來講（原本跑 9000 筆可能要 20 多秒），在這上面優化可能也不會讓速度加快多少。</p><ol start="2"><li>string iterator &amp; reverse_iterator</li></ol><p>  原本在將字串或是指令傳入 trie 中時，都要做昂貴的 string operation，像是去頭去尾或是把字串反過來後再丟進去。這類操作基本上複雜度都是正比於字串長度的。如果改為將起始與終止的迭代器傳入，那就不需要做任何的前處理。但這個優化在最後好像沒有優化太多，可能是字串平均長度都不長，但感覺還是有它價值在 owo。</p><blockquote><p>思路部分到這邊就大致結束了，前前後後經歷了 6 個版本與快 100 個小時的工作時間。有興趣看實際程式碼與更詳細的實作流程的人可以前往<a href="https://github.com/phantom0174/112-1_DS/tree/main/finalproject">這裡</a>。</p></blockquote><h2 id="速度評測">速度評測</h2><h3 id="平台">平台</h3><p>  筆者在寫這個專題前的程式幾乎全部都是在 windows 本機上跑（除了一些 DC Bot 有跑在 ubuntu 的 VPS 上過）。但因為到時候專題的 code 是要在 linux 上跑，而剛好這學期有另外一堂課的 lab 已經有給了個 linux 的虛擬機檔，所以筆者就直接沿用那台 VM 了 uwu。</p><p>  從整體跑下來的結果來看，在 linux 上跑的時需只有 windows 的大概 0.74 ~ 0.8 倍而已。下面順便放一張整個優化過程的線性預估時間圖：</p><p><img src="esti.avif" alt=""></p><blockquote><p>x 軸單位是 100 筆資料；y 軸單位是 100 ms；左邊藍線是這次測資上限；藍線右半邊就是預估在 4 秒內可以跑完多少輸入。</p></blockquote><h3 id="實際數據">實際數據</h3><table><thead><tr><th style="text-align:center"><strong>Dataset size</strong></th><th style="text-align:center"><strong>Linux (ms)</strong></th><th style="text-align:center"><strong>Windows (ms)</strong></th><th style="text-align:center"><strong>Memory (MB)</strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong>100</strong></td><td style="text-align:center">15</td><td style="text-align:center">12</td><td style="text-align:center">8.9</td></tr><tr><td style="text-align:center"><strong>1000</strong></td><td style="text-align:center">85</td><td style="text-align:center">100</td><td style="text-align:center">67.2</td></tr><tr><td style="text-align:center"><strong>9000</strong></td><td style="text-align:center">575</td><td style="text-align:center">850</td><td style="text-align:center">461.8</td></tr><tr><td style="text-align:center"><strong>20000</strong></td><td style="text-align:center">1260</td><td style="text-align:center">1880</td><td style="text-align:center">993.0</td></tr><tr><td style="text-align:center"><strong>30000</strong></td><td style="text-align:center">1850</td><td style="text-align:center">2850</td><td style="text-align:center">1444.4</td></tr><tr><td style="text-align:center"><strong>31000</strong></td><td style="text-align:center">1900</td><td style="text-align:center">2925</td><td style="text-align:center">1486.5</td></tr><tr><td style="text-align:center"><strong>35000</strong></td><td style="text-align:center">N/A</td><td style="text-align:center">N/A</td><td style="text-align:center">N/A</td></tr></tbody></table><blockquote><p>Linux 版本：Ubuntu 22.04.3 LTS<br>CPU 皆為 11th Gen Intel® Core™ i7-11800H</p></blockquote><p>  除了 100 大小的數據集是用小指令檔（只有 8 個 query）下去測之外，其他都是用 200 個 query 的指令檔下去測。Not Available 是因為已經跳 <code>std::bad_alloc</code> 錯誤了，記憶體不夠根本跑不出來。（inverted index 占空間太大）</p><p>稍微描點過後，筆者發現實際時間會比線性再好一點點。</p><p><img src="real.avif" alt=""></p><p>而以下是評分時助教方跑出來的實際數據：</p><blockquote><p>CPU 為 12th Gen Intel® Core™ i7-12700K</p></blockquote><p>  10000 筆輸入 + 更多筆 query cmd 只花了約 <code>323 ms</code>，運行時間班級排名為 <code>3/109</code>。正好前兩名都是筆者朋友，不知道他們是用了甚麼神奇方法把運行時間壓到 2 開頭的，或許是運行環境差異所以測不出來優化點 owo？</p><h2 id="評價">評價</h2><h3 id="難易度">難易度</h3><ul><li>找資料：🌕🌕🌕🌑🌑</li><li>實作　：🌕🌗🌑🌑🌑</li><li>優化　：🌕🌕🌕🌕🌑</li></ul><p>因為擾人的 <code>segmentation fault</code> 是優化過程中的好夥伴，所以筆者優化過程中超常牙起來 owo。</p><h3 id="應用">應用</h3><p>  筆者在看到專題的那時就想到之前有接觸過一個叫 <a href="https://jklm.fun">BombParty</a> 的闔家歡遊戲，遊戲規則是要輪流想出包含特定子字串的英文單字。所以只要隨便找個很多單字的資料集再以 <code>*XXX*</code> 作為指令（XXX 是子字串）就可以把這個程式拿來作弊了(X)。所以筆者做專題時的心態有點像為了自己而做，醬比純粹做個專題有趣多了 uwu。</p><p>不過這個專案沒意外的話應該是會暫時被打入冷宮，到時候要用到時再來修就好了。</p><p>那麼，就先醬。</p><hr><h2 id="參考">參考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://stackoverflow.com/questions/2815083/efficient-data-structure-for-word-lookup-with-wildcards">https://stackoverflow.com/questions/2815083/efficient-data-structure-for-word-lookup-with-wildcards</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://dl.acm.org/doi/pdf/10.1145/42411.42420">https://dl.acm.org/doi/pdf/10.1145/42411.42420</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>program</tag>
      
      <tag>life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>線代小筆記</title>
    <link href="/2023/11/about-linear-algebra/"/>
    <url>/2023/11/about-linear-algebra/</url>
    
    <content type="html"><![CDATA[<!-- Latex Protector: Remove "@" before use --><!--@lp:skip-all--><!--@lp:skip-some--><!-- EMSP Replacer: Auto replacement of double full-width white-space with &emsp;&emsp; --><!-- Spoiler Replacer: Replace ||text||  with <span class="spoiler" onclick="this.classList.toggle('spoiler')"><span class="spoiler-blur ">text</span></span> --><!--@sprp:skip-all--><!-- Footnote Reposer: Auto repositioning of all the footnotes in post --><!--@ft:skip-all--><h2 id="前言">前言</h2><p>  筆者這學期初實在是被課業完全追著跑，都已經好幾個月沒寫文了QQ。今天上完線代後才實際用學到的東東來算之前想要算的東西。這篇文章就留著給線代相關的咚咚吧。<span class="spoiler" onclick="this.classList.toggle('spoiler')"><span class="spoiler-blur ">還有一篇線代的文難產中owo</span></span></p><h2 id="咚咚們">咚咚們</h2><h3 id="k-次重複彈碰通式">k 次重複彈碰通式</h3><blockquote><p>eigen 對角化後取冪再化簡</p></blockquote><p>$$\begin{align*}  V^{+} &= \frac{1}{m+M}\begin{pmatrix}    M-m & -2M\\    2m & M-m\\  \end{pmatrix}\\ \\  \Rightarrow (V^+)^k &= \frac{1}{2}\begin{pmatrix}    l^+ + l^- & (l^+ - l^-)\sqrt{\frac{M}{m}}i\\    (l^- - l^+)\sqrt{\frac{m}{M}}i & l^+ + l^-\\  \end{pmatrix} \\ \\   \text{where } l^{\pm} &= e^{\pm ik\theta},\ \theta = \text{atan2}\left( M-m, \sqrt{4mM} \right) \\ \\  \Rightarrow (V^+)^k &= \begin{pmatrix}    \cos(k\theta) & -\sin(k\theta)\sqrt{\frac{M}{m}}\\    \sin(k\theta)\sqrt{\frac{m}{M}} & \cos(k\theta)\\  \end{pmatrix}\end{align*}$$</p><hr><!-- ## 參考 -->]]></content>
    
    
    
    <tags>
      
      <tag>mafs</tag>
      
      <tag>life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中央存檔點</title>
    <link href="/2023/09/ncu-finale-plog/"/>
    <url>/2023/09/ncu-finale-plog/</url>
    
    <content type="html"><![CDATA[<!-- Latex Protector: Remove "@" before use --><!--@lp:skip-all--><!--@lp:skip-some--><!-- EMSP Replacer: Auto replacement of double full-width white-space with &emsp;&emsp; --><!-- Spoiler Replacer: Replace ||text||  with <span class="spoiler" onclick="this.classList.toggle('spoiler')"><span class="spoiler-blur ">text</span></span> --><!--@sprp:skip-all--><!-- Footnote Reposer: Auto repositioning of all the footnotes in post --><!--@ft:skip-all--><h2 id="前言">前言</h2><p>  筆者先前在中央跑離校手續<span class="spoiler" onclick="this.classList.toggle('spoiler')"><span class="spoiler-blur ">根本就大地遊戲</span></span>時拍了些紀念照，現在才冒著 repo 大小會炸開<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Github Pages 好像只限 1 還 10GB，但這篇文的壓縮後照片加起來就 3MB 了（為求加載速率，筆者 blog 的圖片大小都是 KB 級）。">[1]</span></a></sup>的風險放上來。但筆者在預覽文章時發現圖片排版因為沒有預覽高度限制所以超級醜，所以筆者又改了一下組圖在預覽時的寬度與文內圖片的高度限制，看起來舒服多了 uwu。</p><h2 id="正文">正文</h2><blockquote><p>比對</p></blockquote><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://i.imgur.com/9lWkJeO.jpg" alt="個申"></div><div class="group-image-wrap"><img src="diff-0.avif" alt="離校"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://i.imgur.com/lXzm6Jf.jpg" alt="個申"></div><div class="group-image-wrap"><img src="diff-1.avif" alt="離校"></div></div></div><blockquote><p>蠻喜歡的系館後的櫻花樹休息區</p></blockquote><p><img src="sakura-null.avif" alt="拍的時候沒開花qq"></p><blockquote><p>大禮堂；沒有參加賺服學時數的演講所以比較少來，但有參加嘉嘉老師的那場 uwu。</p></blockquote><p><img src="auditorium.avif" alt="聽說是松果外型 但我都看不出來"></p><blockquote><p>作為常駐 Line 頭貼的 $3/4$ 棵松樹本人</p></blockquote><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="pine.avif" alt=""></div><div class="group-image-wrap"><img src="pine-full.avif" alt="全景"></div></div></div><blockquote><p>中大湖旁的科四館；上學期上天文學時常常來這邊報到；平常有空也會晃到這邊來看鵝鵝 <span class="spoiler" onclick="this.classList.toggle('spoiler')"><span class="spoiler-blur ">還是鴨？不知道owo</span></span></p></blockquote><p><img src="sci-4.avif" alt=""></p><blockquote><p>在中央的最後一次小木屋 <span class="spoiler" onclick="this.classList.toggle('spoiler')"><span class="spoiler-blur ">氣，後來抹茶口味直接消失</span></span></p></blockquote><p><img src="waffle.avif" alt=""></p><blockquote><p>觀景台；有時候晚上感覺壓力小大會一個人來這邊看半個小時的風景 + 吹風再回去</p></blockquote><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="front-full.avif" alt=""></div><div class="group-image-wrap"><img src="front-clouds.avif" alt=""></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="front-bars.avif" alt=""></div></div></div><h2 id="後記">後記</h2><p>這組圖片在筆者手機裡躺了 2 個月，現在終於出來露臉了owo。</p><p>那麼，就醬。</p><h2 id="參考">參考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>Github Pages 好像只限 1 還 10GB，但這篇文的壓縮後照片加起來就 3MB 了（為求加載速率，筆者 blog 的圖片大小都是 KB 級）。<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>進競程大觀園</title>
    <link href="/2023/09/my-first-cpp/"/>
    <url>/2023/09/my-first-cpp/</url>
    
    <content type="html"><![CDATA[<!-- Latex Protector: Remove "@" before use --><!--@lp:skip-all--><!--@lp:skip-some--><!-- EMSP Replacer: Auto replacement of double full-width white-space with &emsp;&emsp; --><!-- Spoiler Replacer: Replace ||text||  with <span class="spoiler" onclick="this.classList.toggle('spoiler')"><span class="spoiler-blur ">text</span></span> --><!--sprp:skip-all--><!-- Footnote Reposer: Auto repositioning of all the footnotes in post --><!--@ft:skip-all--><h2 id="前言">前言</h2><blockquote><p>欸不是為什麼換臉後看起來那麼醜呀qq</p></blockquote><p>  雖然筆者曾經在<a href="https://phantom0174.github.io/2023/06/origin/#fn:15">以前的文章中</a>表明自己不太喜歡競程（以下簡稱 CPP），而這次比下來的結果也大多是如此，但因為是人生中第一次認真打的比賽，也學到了一些咚咚，也有跟室友合作解決了一些瓶頸，所以還是來記錄一下 uwu。</p><h2 id="正文">正文</h2><p>  先打劑強心針：筆者上次碰 CPP 是高二，而且也是去當個花瓶，至今都還沒真正學過 CPP。所以如果某位 CPP 大佬路過看到快要吐血，還請見諒 owo。</p><p>  筆者進 NTHU CS 後發現系上竟然有像資訊社的社團－NTHU TS（<a href="https://taplink.cc/nthuts">NTHU Tech Society</a>），而且社費也很便宜（高中時的快 $1/3$），所以馬上就選擇加進去惹 uwu。而因為筆者覺得自己現在最缺乏的是資安相關咚咚，對它初次印象也比 CPP 好，所以之後就先進資安小組從 0 開始學學看。</p><p>  之所以會參加這次 <code>NTHUTS 競程組入組考</code> 是因為在期初社員大會時看到介紹；而室友原本也是想要進 CPP 組，所以問我要不要也來寫寫看。筆者想說碰一下應該不會有問題，反正頂多也是寫了前一兩題就放棄 <s>後來證明大錯特錯</s>，所以就去寫寫看了。</p><blockquote><p>這次考試規則有明寫可以討論，只要不抄 code 就好了</p></blockquote><h3 id="p1">p1</h3><p>  是個簡單版的 1A2B，應該是沒問題。</p>    <div class="fold">      <div class="fold-title fold-success collapsed" data-toggle="collapse" href="#collapse-65ad56e5" role="button" aria-expanded="false" aria-controls="collapse-65ad56e5">        <div class="fold-arrow">▶</div>AC Code      </div>      <div class='fold-content collapse' id="collapse-65ad56e5">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIZE 4</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a[SIZE], b[SIZE];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) cin &gt;&gt; a[i];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) cin &gt;&gt; b[i];<br><br>    <span class="hljs-type">int</span> A = <span class="hljs-number">0</span>, B = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (a[i] == b[i]) A++;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++) &#123;<br>                <span class="hljs-keyword">if</span> (i == j) <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">if</span> (a[i] != b[j]) <span class="hljs-keyword">continue</span>;<br>                <br>                B++;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; A &lt;&lt; <span class="hljs-string">&quot;A&quot;</span> &lt;&lt; B &lt;&lt; <span class="hljs-string">&quot;B&quot;</span> &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure>      </div>    </div><h3 id="p2">p2</h3><p>  筆者一開始就把這題想太難了，直接把黑白灰編碼成 <code>1, -1, 0</code> 然後開始用數學的角度來看，事後發現其實只要把灰視為黑白都是就好了。到這邊心情已經<code>--</code>。</p>    <div class="fold">      <div class="fold-title fold-success collapsed" data-toggle="collapse" href="#collapse-28ab9646" role="button" aria-expanded="false" aria-controls="collapse-28ab9646">        <div class="fold-arrow">▶</div>AC Code      </div>      <div class='fold-content collapse' id="collapse-28ab9646">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios_base::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> M, N;<br>    cin &gt;&gt; M &gt;&gt; N;<br><br>    <span class="hljs-type">char</span> c;<br>    <span class="hljs-type">int</span> wseq = <span class="hljs-number">0</span>, bseq = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">bool</span> null;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; M; i++) &#123;<br>        <span class="hljs-type">bool</span> wfound = <span class="hljs-number">0</span>, bfound = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; N; j++) &#123;<br>            cin &gt;&gt; c;<br><br>            <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;W&#x27;</span> || c == <span class="hljs-string">&#x27;G&#x27;</span>) wfound = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;B&#x27;</span> || c == <span class="hljs-string">&#x27;G&#x27;</span>) bfound = <span class="hljs-number">1</span>;<br>            null = (c == <span class="hljs-string">&#x27;.&#x27;</span>);<br><br>            <span class="hljs-keyword">if</span> (wfound &amp;&amp; (c == <span class="hljs-string">&#x27;B&#x27;</span> || null)) &#123;<br>                wfound = <span class="hljs-number">0</span>;<br>                wseq++;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (bfound &amp;&amp; (c == <span class="hljs-string">&#x27;W&#x27;</span> || null)) &#123;<br>                bfound = <span class="hljs-number">0</span>;<br>                bseq++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (wfound) wseq++;<br>        <span class="hljs-keyword">if</span> (bfound) bseq++;<br>    &#125;<br><br>    cout &lt;&lt; wseq &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; bseq;<br>&#125;<br></code></pre></td></tr></table></figure>      </div>    </div><h3 id="p3">p3</h3><p>  這題筆者心態完全炸掉，起初寫了個 <code>3</code> 維 dp，果不其然 TLE。後來隔了一天多才抓到可能的降維方式重點，但全觀來看還是沒對。後來是室友直接教筆者這題的 2 維 dp 要怎麼分才過（筆者自己的 2 維 dp 定義爛了，所以做不出來）。室友自己是寫了個 1 維 dp，簡直是鬼，筆者到現在都還沒去想那個 1 維 dp 要怎麼定義。</p>    <div class="fold">      <div class="fold-title fold-success collapsed" data-toggle="collapse" href="#collapse-e064c6af" role="button" aria-expanded="false" aria-controls="collapse-e064c6af">        <div class="fold-arrow">▶</div>AC Code      </div>      <div class='fold-content collapse' id="collapse-e064c6af">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MOD (int)(1e9 + 7)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> size 3000 + 1</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> S, M;  <span class="hljs-comment">// sum &amp; max</span><br><br><span class="hljs-type">int</span> dp[size][size];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">run_dp</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (m &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (m &lt; n) <span class="hljs-keyword">return</span> <span class="hljs-built_in">run_dp</span>(m, m);<br><br>    <span class="hljs-keyword">if</span> (dp[m][n] == <span class="hljs-number">-1</span>) &#123;<br>        dp[m][n] = ((<span class="hljs-built_in">run_dp</span>(m - n, n) % MOD) + (<span class="hljs-built_in">run_dp</span>(m, n - <span class="hljs-number">1</span>) % MOD)) % MOD;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[m][n];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios_base::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    cin &gt;&gt; S &gt;&gt; M;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= S; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= M; j++) &#123;<br>            dp[i][j] = <span class="hljs-number">-1</span>;<br>        &#125;<br>    &#125;<br><br>    dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= S; i++) dp[i][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br><br>    cout &lt;&lt; <span class="hljs-built_in">run_dp</span>(S, M) &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>      </div>    </div><h3 id="p4-part-1">p4 part.1</h3><p>  筆者一開始寫了個 $O(N^2)$ 的演算法，完全 TLE 毫不意外（因為測資會到 $10^6$）。但暫時沒想到這題優化方式，先到下一題。</p><h3 id="p5">p5</h3><p>  這題筆者終於是用自己想出來的演算法解掉了，但前前後後想了至少 2 天。起初是挑前 $k$ 大的數丟到後面，錯；再來是在一定區間內挑前 $k$ 大的數丟到後面，幾乎對了（但關鍵想法還是錯的）；再來是優化找區間的方式，還是錯。到這邊筆者其實心情還是沒有很差，有一部分可能是因為筆者比較喜歡這題，做起來不會很躁 owo。</p><p>  最後想出來正確演算法時，是筆者在凌晨 1. 實作完上面最後一個版本但還是錯後就跑去準備睡覺時。如果區間搜尋已經優化了麼多次，那挑選的方式肯定還是有問題，所以就直接在腦中把問題模擬成 Minecraft 情境開始想像，把問題轉成 「如何讓山的正面看起來最為平緩」。</p><p>  後來筆者才想到重點：一定要極力避免把後面有大數字的小數字移掉，否則數字整體一定會變大。所以筆者最後就想到了<strong>空置域演算法</strong><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="沒錯，筆者甚至有閒情逸致幫演算法取名稱。">[1]</span></a></sup>。只要把過程想像成在爬山，並且遇到下坡時，就回頭把任何高於目前這步地勢還要高的山移掉，直到遇到相同高度的土塊停下，再回到原本位置繼續下山/爬山。這可以確保以爬山者為中心的左區間永遠會是非遞減數列。在往回走的時候，也可以把原本用來存大數的 array 裡面用負數標示移走山體之後造成的空隙會有多長，把複雜度從 $O(k^2)$ 降到 $O(k\log k)$。這個新的演算法也不用額外的 $O(N\log N)$ 時間 &amp; $O(N)$ 空間來算什麼奇怪的區間了，非常直覺，應該才是正常好的演算法會有的樣子 uwu。</p><p>  筆者在凌晨 2. 確定想法後才去睡（而且隔天是<strong>早八</strong>，<strong>非常刺激</strong>）。明天一早起來看室友還沒想出來，就把這個想法告訴室友；我們當天下午就開始實作這個演算法。結果室友 AC 了，筆者還因為實作能力爛掉導致程式也跟著爛掉，後來發現是有 legacy code 沒刪掉還有記憶體邊界覆寫問題導致檢查失敗的鍋，順利 AC。</p><blockquote><p>寫出這題的成就感比前幾題大多了，但實作不出來的感覺還是很躁 ##。</p></blockquote>    <div class="fold">      <div class="fold-title fold-success collapsed" data-toggle="collapse" href="#collapse-5b75660a" role="button" aria-expanded="false" aria-controls="collapse-5b75660a">        <div class="fold-arrow">▶</div>AC Code      </div>      <div class='fold-content collapse' id="collapse-5b75660a">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX (int)(1e5 + 1)</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">short</span> n[MAX];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios_base::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> T;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;T);<br><br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-type">char</span> c;<br>        <span class="hljs-type">int</span> cur_pos = <span class="hljs-number">0</span>;<br>        queue&lt;<span class="hljs-type">int</span>&gt; desc;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            c = <span class="hljs-built_in">getchar</span>();<br><br>            <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27; &#x27;</span>)<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;\n&#x27;</span>)<br>                <span class="hljs-keyword">continue</span>;<br><br>            n[cur_pos] = c - <span class="hljs-number">48</span>;<br>            <span class="hljs-keyword">if</span> (cur_pos &gt; <span class="hljs-number">0</span> &amp;&amp; n[cur_pos - <span class="hljs-number">1</span>] &gt; n[cur_pos])<br>                desc.<span class="hljs-built_in">push</span>(cur_pos);<br><br>            cur_pos++;<br>        &#125;<br>        desc.<span class="hljs-built_in">push</span>(cur_pos);<br>        n[cur_pos] = <span class="hljs-number">10</span>;<br><br>        <span class="hljs-type">int</span> k;  <span class="hljs-comment">// ops can do</span><br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;k);<br>        k = <span class="hljs-built_in">min</span>(cur_pos, k);<br><br>        <span class="hljs-type">int</span> sel[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br><br>        <span class="hljs-type">int</span> l, r;<br>        <span class="hljs-keyword">while</span> (!desc.<span class="hljs-built_in">empty</span>() &amp;&amp; k) &#123;<br>            r = desc.<span class="hljs-built_in">front</span>();<br>            desc.<span class="hljs-built_in">pop</span>();<br><br>            <span class="hljs-keyword">for</span> (l = r - <span class="hljs-number">1</span>; l &gt;= <span class="hljs-number">0</span>; l--) &#123;<br>                <span class="hljs-keyword">if</span> (n[l] &lt; <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">// hop across gaps</span><br>                    l += n[l];<br>                    <span class="hljs-keyword">if</span> (l &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (n[l] &lt;= n[r]) <span class="hljs-keyword">break</span>;<br><br>                sel[n[l]]++;<br><br>                <span class="hljs-keyword">if</span> (n[l] &lt; n[cur_pos])<br>                    n[cur_pos] = n[l];<br><br>                n[l] = <span class="hljs-number">-1</span>;<br>                <span class="hljs-keyword">if</span> (!(--k)) <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">// indicates gap width</span><br>            <span class="hljs-keyword">if</span> (l != r - <span class="hljs-number">1</span>) n[r - <span class="hljs-number">1</span>] = l - (r - <span class="hljs-number">1</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; cur_pos; i++) &#123;<br>            <span class="hljs-keyword">if</span> (n[i] &gt; <span class="hljs-number">0</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, n[i]);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; sel[i]; j++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, i);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>      </div>    </div><h3 id="p4-part-2">p4 part.2</h3><p>  筆者寫完 p5 的隔天才來想這題，但用錯了想法，只想到一個更爛的 $O(N^2\log N)$ 的演算法。雖然感覺可以用線段樹做，但因為筆者完全沒能力用它所以就先算了。後來室友也跟筆者說了可能的另外一個想法：把能攻擊的 ll 和沒辦法攻擊的 ll 分開看，直接把複雜度壓到 $O(N\log N)$。筆者想了一下之後把其中一些步驟優化變成線性複雜度，但整體來說還是讚讚的 $O(N\log N)$。順利 AC。</p><p>  唯獨筆者室友那邊 p4 還是 TLE，後來筆者發現只是 I/O 優化的問題，傳給他筆者之前看 CPP 朋友常用的兩行神奇程式碼就過了，他超氣 w。</p>    <div class="fold">      <div class="fold-title fold-success collapsed" data-toggle="collapse" href="#collapse-9d3fcfc2" role="button" aria-expanded="false" aria-controls="collapse-9d3fcfc2">        <div class="fold-arrow">▶</div>AC Code      </div>      <div class='fold-content collapse' id="collapse-9d3fcfc2">        <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX (int)(1e6 + 1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pii pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Compare</span> &#123;<br>   <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(pii a, pii b)</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> a.first &lt; b.first; &#125;<br>&#125;;<br><br>pii ll_waiting[MAX];<br>priority_queue&lt;pii, vector&lt;pii&gt;, Compare&gt; mana;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp_courage</span><span class="hljs-params">(pii a, pii b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a.second &gt; b.second;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios_base::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> N, M;<br>    cin &gt;&gt; N &gt;&gt; M;<br><br>    <span class="hljs-type">int</span> m, c;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>        cin &gt;&gt; m &gt;&gt; c;<br>        ll_waiting[i] = &#123; m, c &#125;;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(ll_waiting, ll_waiting + N, cmp_courage);<br><br>    <span class="hljs-type">int</span> avail_pos = <span class="hljs-number">0</span>, ll_counter = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (M &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">while</span> (avail_pos &lt; N &amp;&amp; ll_waiting[avail_pos].second &gt;= M) &#123;<br>            mana.<span class="hljs-built_in">push</span>(ll_waiting[avail_pos]);<br>            avail_pos++;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (mana.<span class="hljs-built_in">empty</span>()) <span class="hljs-keyword">break</span>;  <span class="hljs-comment">// no ll avail</span><br><br>        M -= mana.<span class="hljs-built_in">top</span>().first;<br>        mana.<span class="hljs-built_in">pop</span>();<br>        ll_counter++;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (M &gt; <span class="hljs-number">0</span>)<br>        cout &lt;&lt; <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span><br>        cout &lt;&lt; ll_counter;<br>&#125;<br></code></pre></td></tr></table></figure>      </div>    </div><h2 id="後記">後記</h2><p>  總之，筆者人生第一次 5 題都解出來了<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="雖然前前後後花了五天多，這顯然不是正常上機 CPP 的時間。">[2]</span></a></sup>，在這邊大感謝室友 &amp; TW54，被我問了一堆問題。反正筆者最後還是會去資安小組，這次的 CPP 小旅程也差不多就到這邊 uwu。</p><p>那麼，就醬。</p><p><img src="fin.avif" alt=""></p><h2 id="參考">參考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>沒錯，筆者甚至有閒情逸致幫演算法取名稱。<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>雖然前前後後花了五天多，這顯然不是正常上機 CPP 的時間。<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>program</tag>
      
      <tag>life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>有關追蹤曲線</title>
    <link href="/2023/08/pursuit-curve/"/>
    <url>/2023/08/pursuit-curve/</url>
    
    <content type="html"><![CDATA[<!-- Latex Protector: Remove "@" before use --><!--@lp:skip-all--><!--@lp:skip-some--><!-- EMSP Replacer: Auto replacement of double full-width white-space with &emsp;&emsp; --><!-- Spoiler Replacer: Replace ||text||  with <span class="spoiler" onclick="this.classList.toggle('spoiler')"><span class="spoiler-blur ">text</span></span> --><!--sprp:skip-all--><!-- Footnote Reposer: Auto repositioning of all the footnotes in post --><!--@ft:skip-all--><h2 id="前言">前言</h2><p>  筆者這個暑假有段時間沉迷於開放世界型遊戲（典型的報復性沉迷 uwu），其中包含了知名的 Terraria。先說個題外話：這是筆者第一次破關（打完 Moonlord），花了成噸的時間在上面，不過娛樂性相當值得 \^~^。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="terraria-house.avif" alt="Home sweet home"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="terraria-save.avif" alt="精神時光屋"></div></div></div><p>  玩過的人應該知道，Terraria 中有一個叫 <a href="https://terraria.wiki.gg/zh/wiki/%E8%A1%80%E8%82%89%E5%A2%99">Wall Of Flesh (WoF)</a> 的 Boss。WoF 有一種特殊的 debuff - 狂卷之舌：當你在距離牠太遠時會伸出舌頭把你拉回去。</p><p>  筆者在玩的時候就想到，如果玩家利用魔鏡傳送回地表後馬上開始被拉回去地獄時，玩家的軌跡 <strong>真正來說</strong> 會長怎樣呢<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="假設玩家可以存活到被拉到 WoF 身旁，且拉的速度為等速。">[1]</span></a></sup>？因為在拉的過程中 WoF 並不會靜止不動，而是邊拉著玩家邊前進，造成軌跡會有一定程度的彎曲。而這個東西，讓筆者想起來了之前有看過但沒有詳細研究<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="其實有想詳細研究過，但被打斷了，詳細原因等等再說。">[2]</span></a></sup>的追蹤曲線 - <a href="https://zh.wikipedia.org/wiki/%E8%BF%BD%E8%B8%AA%E6%9B%B2%E7%BA%BF">pursuit curve</a>，研究正式開始。</p><p><img src="curve-spoiler.avif" alt="spoiler: 會長醬"></p><h2 id="正文">正文</h2><h3 id="摸索">摸索</h3><p>  在實際狀況下，玩家是被拉著前進；但其實可以把問題看成是：玩家以等速向著 WoF 追去；WoF 以等速前進，讓這個問題符合 pursuit curve 的定義。更準確來說，是 <a href="https://en.wikipedia.org/wiki/Radiodrome">Radiodrome</a> 的定義，也就是追蹤的目標會以等速前進的狀況。</p><p>  筆者列了些基本的式子：</p><p>$$\textbf{H}_t = v_h\ \frac{\textbf{W} - \textbf{H}}{|\textbf{W} - \textbf{H}|},\ \textbf{W} = (x_W - v_w\,t,\ y_W)$$</p><p>其中 H 是玩家（human）；W 是 WoF； $\textbf{H}$ 是玩家的位置向量；$\textbf{W}$ 是 WoF 的位置向量；$v_i$ 就代表各自的移動速度。</p><p>  筆者一開始想要從這個微分方程解 time-dependent path，結果發現怎麼解都解不出來，把那條向量微分方程式換元也只能得到一條裡面有 unit vector 的 DE。筆者還特地去問了台大物理系的朋朋，結果他也不知道要怎麼處理那個鬼東西 qq。</p><p>  最後翻到 radiodrome 的 wiki page 時才發現這個東西根本沒辦法解 time-dependent，光解 x-y functional relation 的步驟就夠難了。</p><p>  接下來，筆者基本上就是先照著 wiki page 上面的解法一步步嘗試理解 <span class="spoiler" onclick="this.classList.toggle('spoiler')"><span class="spoiler-blur ">真的有點難 owo</span></span>，理解完後再用自己的符號習慣重新解了 x-y 軸翻轉後的版本（因為 Terraria 的世界是橫向），最後再把解出來的結果放進 Desmos 中模擬進行結果驗證。以下是解出來的路徑結果與 <a href="https://www.desmos.com/calculator/yspi1pjjkn?lang=zh-TW">Desmos 模型</a>：</p><p>$$x\left(y\right) = H_x + \int_{0}^{y}\sinh\left(c + V\ln\left(1 - \frac{Y}{W_y}\right)\right)\,dY \\c = \sinh^{-1}\left(\frac{W_x - H_x}{W_y - H_y}\right),\ V = \frac{v_w}{v_h}$$</p><p>其中 $H,\ W$ 下標 $x,\ y$ 是兩個體的初始位置（initial value）。</p><blockquote><p>這個積分其實寫得出封閉形式，但因為有點小長所以還是寫積分式比較漂亮 uwu。</p></blockquote><hr><h3 id="延伸">延伸</h3><p>  光解出這個 pursuit curve 的筆者並不滿足，畢竟這只是其中一個特殊狀況：目標要等速，移動方向要平行兩軸之一且只能是直線。所以筆者去找了些 paper，像是在 <a href="https://www.researchgate.net/publication/298480827_Pursuit_Curves_and_Ordinary_Differential_Equations">Pursuit Curves and Ordinary Differential Equations</a> 這篇裡面就教你怎麼解 multi-pursuer 的狀況，這也是筆者在文章前面說「曾經看過」的東西，在下一段<strong>小提</strong>一下。</p><p>  筆者在高中時候曾經看過 multi-pursuer 的問題，但那時候的筆者顯然是完全不知道為什麼這個問題的路徑會是 <strong>對數螺線</strong>，所以跑去問補習班的物理老師。結果那位老師就百般刁難筆者的問題敘述方式<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="簡述一下那位物理老師的話：「你連怎麼說這個情況都會說不清楚那還解甚麼題目，但老師還是幫你看一下，**看了 1 分鐘多**，啊這個老師也不知道怎麼解要想一下。」直接笑死，根本不會解；不過完全不意外，蠻多筆者遇過的補習班老師在問同領域的課外問題時的回應幾乎都是「要想一下」，那時早就習慣了##。">[3]</span></a></sup>，完全脫離了筆者問問題的本意<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="我是來學習不是來聽文不對題的廢話。">[4]</span></a></sup>；所以筆者就氣到直接把這個東西擺在旁邊，回去乖乖學物理。</p><p>  現今，在大一下學了工程數學中的 Laplace transform 之後的筆者剛好看得懂這篇 paper 中的解法，所以理解起來並無大礙，也算是攻克了一個長年疑問。</p><hr><h3 id="結尾">結尾</h3><p>  此外，筆者在翻更多資料時也發現了這個<a href="https://mathcurve.com/courbes2d.gb/poursuite/poursuite.shtml">紀載了巨多曲線資訊的網站</a>。其中關於 pursuit-curve 的介紹 &amp; 另一篇 paper 讓筆者知道 pursuit-curve 確實不是這麼好解的東西。</p><blockquote><p>筆者記得在 general-form 下會是一個 $\partial_2$ Non-linear DE，可以先不用嘗試求解了 owo。</p></blockquote><p>  所以，筆者又自己在 Desmos 中建了一個 <a href="https://www.desmos.com/calculator/pz1rfnm4ol?lang=zh-TW">Simulator of general-form pursuit curve 的模型</a>，有興趣的人也歡迎去玩玩看！（還支持軌跡功能呦 ^~^）</p><hr><h3 id="2023-9-9-更新：模擬方式">2023/9/9 更新：模擬方式</h3><p>  筆者一開始進行模擬時（也就是用數值法求解 DE）是用 Euler method，今天在看這個影片時候學到了名為 <strong>RK4</strong> 的新方法！</p><!-- Building a Physics Engine with C++ and Simulating Machines --><div class="video-container"><iframe src="https://www.youtube.com/embed/TtgS-b191V0" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>普通的 Euler method 在逼近時只用了一步，但 RK4 代表在逼近時前前後後用了總共 4 步，最後再取平均來獲得更精確的估計值。而 total accumulated error 的複雜度會是 $O(\text{dt}^p)$，其中 $p$ 為更新步數，$\text{dt}$ 為更新時間差。</p><p>所以 RK4 會比 Euler method 還要再更精確許多，如上影片中 3:32 左右講述的：使用 Euler method 要求出不發散的解需要以 600KHz 進行模擬；但使用 RK4 只需要 300Hz 就可得出穩定解。</p><p>筆者去找了些 RK4 的教學影片後，也嘗試利用看看在暑假學了一些的 Unity 去寫了 pursuit-curve 的模擬器，並在裡面實現 Vector DE 版本的 RK4 更新，如下：</p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-65ad56e5" role="button" aria-expanded="false" aria-controls="collapse-65ad56e5">        <div class="fold-arrow">▶</div>Unity code      </div>      <div class='fold-content collapse' id="collapse-65ad56e5">        <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">RK4UpdatePos</span>()</span><br>&#123;<br>    Vector3 k1 = dP(targetClass.T_total, trans.position),<br>        k2 = dP(targetClass.T_total + dt / <span class="hljs-number">2</span>, trans.position + dt / <span class="hljs-number">2</span> * k1),<br>        k3 = dP(targetClass.T_total + dt / <span class="hljs-number">2</span>, trans.position + dt / <span class="hljs-number">2</span> * k2),<br>        k4 = dP(targetClass.T_total + dt, trans.position + dt * k3);<br><br>    Vector3 avr = (k1 + <span class="hljs-number">2</span> * k2 + <span class="hljs-number">2</span> * k3 + k4) / <span class="hljs-number">6</span>;<br>    trans.position += dt * avr;<br>&#125;<br><br><span class="hljs-function">Vector3 <span class="hljs-title">dP</span>(<span class="hljs-params"><span class="hljs-built_in">float</span> t, Vector3 p</span>)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> moveSpeed * (targetClass.PathPos(t) - p).normalized;<br>&#125;<br></code></pre></td></tr></table></figure>      </div>    </div><p>也放上一張模擬的結果owo：</p><p><img src="simu0.avif" alt="$T(t) = (\cos(t), \cos(t)^3)$"></p><p>總地來說，Desmos 和 Unity 在效能上真的差超多；但或許是因為追蹤曲線的 DE 過於簡單，Euler &amp; RK4 之間的模擬只有在 Target path 非常極端的狀況下才會有微小差異。</p><p>反正學到新東西就是爽爽的uwu。</p><hr><h3 id="2023-9-10-更新：鬼抓人模型模擬">2023/9/10 更新：鬼抓人模型模擬</h3><p>  繼昨天的模擬之後，筆者在晚上時突然想到了可以把鬼抓人的行為描述成微分方程，如下：</p><p>$$\left\{\begin{matrix}    \begin{align*}        \frac{dP}{dt} &= V_P \cdot \Lambda (T-P)\\        \frac{dT}{dt} &= V_T \cdot \Lambda \left[\Lambda (T-P)(1-\alpha)+R_{\theta}\,\hat{\tau}(t)\alpha \right]    \end{align*}\end{matrix}\right.$$</p><p>其中 $P$ 擔任鬼的角色；$T$ 就是人。$\Lambda(v)$ 代表 $\hat{v}$ <span class="spoiler" onclick="this.classList.toggle('spoiler')"><span class="spoiler-blur ">因為對於很長的 $v$ 來說只有個小 hat 太不明顯了，所以寫成 function 型態</span></span>。</p><p>也順便解釋一下各個式子的意義：$P_t$ 沒甚麼好講，跟 pursuit curve 的狀況一樣；$T_t$ 的意思是：人除了會往反方向逃離（$\Lambda (T-P)$），同時也會受想要逃離鬼的心理作祟，亦或者是受場地大小限制而拐彎（$R_{\theta},\hat{\tau}(t)$）。而 $\alpha$ 就是作為這兩者心理因素的加權平均值，最後再將向量合 normalize 之後乘上 $V_T$ 即為人的逃跑微分方程。</p><p>其中 $R_{\theta}$ 是用來修正坐標系的旋轉矩陣，$\theta$ 是以下函數：</p><p>$$\theta=\text{atan2}\left(T-P\right)$$</p><p>但要用 RK4 解這組向量微分方程組的話，就必須要把這個方程組合併，並鑲入 $\mathbb{R}^5$ 中（在 Unity 裡實作時其實是 $\mathbb{R}^7$），如下：</p><p>$$\begin{align*}    S &= (P,T)\\    S_t &= (P_t,T_t)\\        &= (f_1(t,P,T),\ f_2(t,P,T))\\        &= (f_1(t,S),\ f_2(t,S))\end{align*}$$</p><p>$S$ 代表 System，描述整個系統。而有了這個複合向量之後，我們就可以用 RK4 去模擬這個問題了！以下為核心 code：</p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-28ab9646" role="button" aria-expanded="false" aria-controls="collapse-28ab9646">        <div class="fold-arrow">▶</div>Unity code      </div>      <div class='fold-content collapse' id="collapse-28ab9646">        <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">UpdatePos</span>()</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (pTrans == <span class="hljs-literal">null</span> || tTrans == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;<br><br>    Sys delta = RK4DESolver(<span class="hljs-keyword">new</span> Sys(pTrans.position, tTrans.position));<br>    pTrans.position += delta.P;<br>    tTrans.position += delta.T;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> Sys <span class="hljs-title">RK4DESolver</span>(<span class="hljs-params">Sys s</span>)</span><br>&#123;<br>    Sys k1 = dS(tTotal, s),<br>        k2 = dS(tTotal + dt / <span class="hljs-number">2</span>, s + k1 * (dt / <span class="hljs-number">2</span>)),<br>        k3 = dS(tTotal + dt / <span class="hljs-number">2</span>, s + k2 * (dt / <span class="hljs-number">2</span>)),<br>        k4 = dS(tTotal + dt, s + k3 * dt);<br><br>    Sys avr = (k1 + (<span class="hljs-number">2</span> * k2) + (<span class="hljs-number">2</span> * k3) + k4) / <span class="hljs-number">6</span>;<br><br>    <span class="hljs-keyword">return</span> avr * dt;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> Sys <span class="hljs-title">dS</span>(<span class="hljs-params"><span class="hljs-built_in">float</span> t, Sys s</span>)</span><br>&#123;<br>    Vector3 dirVec = (s.T - s.P).normalized;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Sys(<br>        vP * dirVec,<br>        vT * (<br>            dirVec * (<span class="hljs-number">1</span>-alpha) + XYRotation(tiltVector(t), Mathf.Atan2(dirVec.y, dirVec.x)) * alpha<br>        ).normalized<br>    );<br>&#125;<br></code></pre></td></tr></table></figure>      </div>    </div><blockquote><p>其中 Sys 實作是利用 struct + operator overload。</p></blockquote><p>說了一堆奇怪的數學術語，是時候來看一些模擬圖了！</p><blockquote><p>參數使用：</p></blockquote><p>$$\begin{align*}    A(k) &= \frac{k\pi}{180}\\    \hat{\tau}(t,k) &= \left(\cos(x), \sin(x)\right),\ x = \cos(t)A(k)\end{align*}$$</p><p>$A(k)$ 是角度範圍修正量。</p><blockquote><p>紅色是人，藍色是鬼</p></blockquote><p><img src="simu45.avif" alt="$\hat{\tau}(t, 45)$"><br><img src="simu30.avif" alt="$\hat{\tau}(t, 30)$"></p><p>人稍微跑慢一點就變醬了qq：</p><p><img src="too_slow.avif" alt="$V_T/V_P = 0.9$"></p><p>從上面模擬結果可知：跑的時候不要亂擺來擺去，跑直線最好 owo。</p><!-- Simulation of Tag game model --><div class="video-container"><iframe src="https://www.youtube.com/embed/pIOTvZjVlv0" frameborder="0" loading="lazy" allowfullscreen></iframe></div><h2 id="後記">後記</h2><p>在這邊特別感謝那位台大物理朋朋，被我硬塞了一堆奇怪的東東 owo。</p><blockquote><p>也要感謝新室友，也被我塞了一堆奇怪的東東 uwu。</p></blockquote><p>總之，就是一個寫紀錄文寫到一半時突然想起某個氣死人的事情並對其狂酸的筆者。</p><p>那麼，就醬 uwu（心情舒爽多了。</p><h2 id="註腳">註腳</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>假設玩家可以存活到被拉到 WoF 身旁，且拉的速度為等速。<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>其實有想詳細研究過，但被打斷了，詳細原因等等再說。<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>簡述一下那位物理老師的話：「你連怎麼說這個情況都會說不清楚那還解甚麼題目，但老師還是幫你看一下，<strong>看了 1 分鐘多</strong>，啊這個老師也不知道怎麼解要想一下。」直接笑死，根本不會解；不過完全不意外，蠻多筆者遇過的補習班老師在問同領域的課外問題時的回應幾乎都是「要想一下」，那時早就習慣了##。<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span>我是來學習不是來聽文不對題的廢話。<a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>mafs</tag>
      
      <tag>program</tag>
      
      <tag>life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Async Traverser 小介紹</title>
    <link href="/2023/07/async-traverser/"/>
    <url>/2023/07/async-traverser/</url>
    
    <content type="html"><![CDATA[<!-- Latex Protector: Remove "@" before use --><!--lp:skip-all--><!--@lp:skip-some--><!-- EMSP Replacer: Auto replacement of double full-width white-space with &emsp;&emsp; --><!-- Spoiler Replacer: Replace ||text||  with <span class="spoiler" onclick="this.classList.toggle('spoiler')"><span class="spoiler-blur ">text</span></span> --><!--sprp:skip-all--><!-- Footnote Reposer: Auto repositioning of all the footnotes in post --><!--ft:skip-all--><div class="note note-info">            <p>此文章待潤色</p>          </div><h2 id="前言">前言</h2><p>  繼上次的 <code>latex-protector</code> 之後，因為筆者又多了一些需要針對每篇文章的原始 <code>.md</code> 檔自動修正的程序；所以該脆直接把這個過程模組化，做成高階的 <code>async-traverser</code>，只需要專注在撰寫處理檔案內容的程式碼與狀態回應的部分上即可。</p><p><a href="https://github.com/phantom0174/phantom0174.github.io/tree/master/utils/traverse/async_traverser"><strong>程式碼點我</strong></a></p><h2 id="正文">正文</h2><blockquote><p>這篇文會專注在介紹 <code>async-traverser</code> 的運作原理與架構上</p></blockquote><h3 id="前提">前提</h3><p>  其實這個東西筆者上學期就已經有想法了，也有寫出來一些東西；但那時的想法還不是很成熟，一直沒辦法決定底層的架構、實作方式、以及到底要實現什麼功能。考完轉學考後來寫只花了差不多 1 小時就把之前模模糊糊的實作方式確定下來了。</p><h3 id="架構">架構</h3><p>  <code>async-traverser</code> 使用 <code>python</code> 撰寫，主要由兩個類別組成：<code>Traverser</code> 與 <code>Response</code>。前者負責遍歷 <code>.md</code> 的過程；後者負責紀錄遍歷檔案過程中的狀況回報（像是成功、警告、或是錯誤，以及個別的詳細訊息）。</p><blockquote><p>其實應該是要命名為 <code>Responser</code> 的，但筆者好懶，不想改 owo</p></blockquote><p>  <code>Traverser</code> 有以下幾個可自訂的 attributes: <code>name</code>, <code>target_folder_root</code>, <code>workflow_function</code>: <code>name</code> 即是這個 <code>Traverser</code> 負責的流程名稱；<code>target_folder_root</code> 是從舊版 <code>Protector</code> 移植過來的東西，就是需要遍歷的根資料夾相對路徑；而 <code>workflow_function</code> 是自訂的 <code>.md</code> 檔案處理函數。其中 <code>workflow_function</code> 有一定的格式，如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">workflow</span>(<span class="hljs-params">file_path: <span class="hljs-built_in">str</span>, file: TextIOWrapper, responser: Response</span>):<br>    ...<br></code></pre></td></tr></table></figure><h3 id="流程">流程</h3><ol><li><p><code>Traverser</code> 開始計時（in ms）</p></li><li><p><code>Traverser</code> 會遞迴下去搜 <code>target_folder_root</code> 底下的所有檔案，將其開好之後（mode: r+），將檔案本身與 <code>Response</code> 一起丟給 <code>workflow_function</code>，讓其可以將單一檔案的回應訊息儲存進 <code>Response</code>。</p></li><li><p><code>workflow_function</code> 開始運作，對檔案內容進行自定義的修改。</p></li><li><p>等到所有檔案都被遍歷完之後，停止計時；並調用 <code>Response</code> 底下的 <code>output_result()</code> 輸出美化版的錯誤訊息（各種層級的回應訊息會有不同顏色作為標示）。</p></li></ol><p>有關流程的更詳細底層邏輯，請自行前往 repo 看囉～</p><h2 id="後記">後記</h2><p>  寫完這個東西後筆者就迫不及待地加進一堆神奇的功能，開始解放雙手的旅程了！目前有以下幾個小功能：</p><ol><li>全形空格替換器</li><li>latex-protector（移植後的版本）</li><li>spoiler syntax replacer</li><li>腳註自動排序器<blockquote><p>近期加的一個超好用工具，省略了超多慢慢打字的時間！</p></blockquote></li></ol><p>之後肯定會再出現一些有趣的功能，敬請期待 owo。</p><p>那麼，就先醬。</p><hr><p>Photo by <a href="https://unsplash.com/@osmanrana?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Osman Rana</a> on <a href="https://unsplash.com/photos/G7VN8NadjO0?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a>.</p>]]></content>
    
    
    
    <tags>
      
      <tag>program</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023 台聯大轉學考 - 記錄檔</title>
    <link href="/2023/07/2023-transfer-log/"/>
    <url>/2023/07/2023-transfer-log/</url>
    
    <content type="html"><![CDATA[<!-- Latex Protector: Remove "@" before use --><!--@lp:skip-all--><!--@lp:skip-some--><!-- EMSP Replacer: Auto replacement of double full-width white-space with &emsp;&emsp; --><!-- Spoiler Replacer: Replace ||text||  with <span class="spoiler" onclick="this.classList.toggle('spoiler')"><span class="spoiler-blur ">text</span></span> --><!--@sprp:skip-all--><!-- Footnote Repositioner: Auto repositioning of all the footnotes in post --><!--@ft:skip-all--><h2 id="前言">前言</h2><p>這是一篇筆者用來記錄自已大一轉學考的文章，接下來會依照以下的架構娓娓道來：</p><ol><li>結果<ul><li>報考組別、科系</li><li>分數、上榜與否</li><li>銘謝</li></ul></li><li>資源一覽</li><li>準備<ul><li>原始學校</li><li>已知條件</li><li>準備方式<ul><li>使用的書</li><li>心態（包含問題：要不要顧學校？）</li></ul></li></ul></li><li>心路歷程<ul><li>前期</li><li>中期</li><li>後期</li><li>考試當天</li><li>考試後到放榜</li></ul></li></ol><h2 id="正文">正文</h2><h3 id="結果">結果</h3><h4 id="成績">成績</h4><p>  報考台聯大 A4 清大資工，分數如下：</p><p><img src="score.webp" alt=""></p><p>  結果：正取</p><h4 id="銘謝一覽">銘謝一覽</h4><ul><li>感謝家裡支持我參加考試，也一直提供經濟支援讓我能買有點小貴的參考書們還有報名費。</li><li>感謝跟我一起讀書的那位朋友，有了位戰友讀書時也不會那麼寂寞，教你的過程中我也是收穫良多，最後還請我吃飯<span class="spoiler" onclick="this.classList.toggle('spoiler')"><span class="spoiler-blur ">肯定要找時間回請你的，欸嘿</span></span>。</li><li>感謝高中的某位社團朋友，跟我聊了很多心事，解決了在中期時因為其他事情影響的備考不確定性，也堅定了我的目標。</li><li>感謝一位帶我之前遊歷新竹的好朋友，那次玩得超級充實的，也讓我這次重返新竹時重拾對環境的熟悉感，蠻心安的；這肯定也是要請吃飯的環節 owo。</li><li>感謝高中班導的近況關心，是時候在這個暑假回去探班了ｗ。</li><li>最後也要感謝筆者自己在備考過程中付出的努力，同時顧好心理健康沒有重蹈覆轍。</li></ul><h3 id="資源一覽">資源一覽</h3><p>  因為不想讓看這篇文的人在文章中慢慢找或是根本找不到，所以就先把推薦的資源放在這邊：</p><ul><li><p>微積分</p><ul><li>參考書<ul><li>微積分學習要訣 第22版, 劉明昌博士 <code>實體書，$792</code></li></ul></li><li>考古題＆解答<ul><li>微積分111~106年歷屆試題詳解, 劉明昌博士 <code>實體書，$800</code></li><li><a href="https://drive.google.com/file/d/1T9H5RZBK7Upw2Sq5avTJSz_DABgSNFwN/view">102-111年大轉微積分歷試詳解免費提供, 喻超凡老師</a> <code>電子檔</code></li></ul></li></ul></li><li><p>計概</p><ul><li>原文書<ul><li>Foundations of Computer Science 4/e, Behrouz Forouzan <code>實體書，$1088 | 電子檔</code></li><li>Computer Science: An Overview 13/e, Dennis Brylow and J. Glenn Brookshear <code>電子檔</code></li></ul></li><li>參考書<ul><li>計算機概論 重要題型 • 完全攻略, 蕭雄文 <code>實體書，$480</code></li></ul></li><li>考古題＆解答＆筆記＆超多東西<ul><li><a href="https://band.us/n/aaaf95p3a0Rfs">轉考電腦科學討論區</a> <code>Band 社群</code></li></ul></li></ul></li><li><p>英文</p><ul><li>考古題＆解答<ul><li>台綜聯大轉學考英文用書, 李盛光 <code>實體書，$865</code></li></ul></li></ul></li></ul><p>  有關如何查到原文書的電子檔，請見：<a href="#%E9%99%84%E9%8C%84%EF%BC%9A%E5%A6%82%E4%BD%95%E6%89%BE%E5%8E%9F%E6%96%87%E6%9B%B8%E9%9B%BB%E5%AD%90%E6%AA%94">附錄：如何找原文書電子檔</a></p><h3 id="準備">準備</h3><p>  筆者在學測時數學炸開，最後選擇先用個申申請上中央資工，並以轉學考作為短期目標。此外，因為以下幾點，筆者選擇以 <strong>自讀</strong> 台聯大作為目標：</p><ol><li>筆者的文科顯然不行<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="爛到掉渣的那種，國中＆高中都嘗試救過了，但顯然沒興趣 + 救不回來，就連學測國文都是隨便亂猜到12級。之所以有列這個是因為記得不知道哪個單位之前資工系的有考過國文，但今年好像沒有。">[1]</span></a></sup>。</li><li>中央資工最近幾年竟然沒有必修普物，筆者的物理又忘得差不多了<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="那時候去諮詢 + 查資料是發現台綜會考物理，可是後來簡章出來才發現沒有。但其實也沒有差，因為台綜今年的名額根本沒有資工 qwq。">[2]</span></a></sup>。</li><li>筆者在高二自學過微積分；雖然數學在學測時炸了，但微積分仍然蠻拿手的 owo<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="至少微積分上下學期學期成績都滿分（微積分大會考金牌 + 銅牌獎） + 上學期離散 95，下學期工程數學滿分。">[3]</span></a></sup>。</li><li>英文學測 15 級，有欠缺的話也是單字的問題，要自學的話應該在能力範圍內。</li><li>純粹不想在自己沒有真正想要補習的心態下去補<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="筆者覺得自己高中時補習沒有真正好好利用資源，有點像在把錢拿去燒的感覺，花一次就幾萬幾萬超級貴；所以這次考試期間就先嘗試自己讀（雖然參考書費也是蠻貴的，汗）。">[4]</span></a></sup>。</li></ol><p>  接下來說說筆者使用的參考書們以及心態。當初在準備前筆者也是去網路上查了很多心得文，最後選擇使用<a href="https://www.ptt.cc/bbs/Transfer/M.1537723290.A.ABB.html">這篇文章</a>中介紹的書，各科選擇的參考書如下：</p><ul><li><p>微積分</p><ul><li><strong>微積分學習要訣 第22版, 劉明昌博士</strong><blockquote><p>前中後期皆有使用；雖然初期有點不符合筆者的口味，有時候也會跳過一些筆者認為必須要解釋的東西，但中後半的內容寫得蠻好的，大推！</p></blockquote></li><li><strong>微積分111~106年歷屆試題詳解, 劉明昌博士</strong><blockquote><p>中、後期使用</p></blockquote></li></ul></li><li><p>計概</p><ul><li><strong>Foundation of Computer Science 4/e</strong><blockquote><p>前中後期皆有使用；剛好是中央資工的計概用書</p></blockquote></li><li><strong>Computer Science: An Overview 13/e, Dennis Brylow and J. Glenn Brookshear</strong><blockquote><p>中、後期使用</p></blockquote></li><li><strong>計算機概論 重要題型 • 完全攻略, 蕭雄文</strong><blockquote><p>中、後期使用；其中綜合了多所學校的計概考題，可以作為補充資料使用</p></blockquote></li></ul></li><li><p>英文</p><ul><li><strong>臺綜聯大轉學考英文用書, 李盛光</strong><blockquote><p>中、後期使用；內容為考古題 + 詳解，也有附上相當多的文法解釋，大推</p></blockquote></li></ul></li></ul><p>  在心態上，因為筆者在國中讀會考時曾經讀到走火入魔，犧牲了自己的身心健康，所以在學測＆這次考試時都不想要像上面那篇文中的做法一樣：</p><blockquote><p>放棄在校成績拉低GPA、大二的選課完全亂選、沒有宿舍也沒找房子，一天讀18小時犧牲睡眠、犧牲自己健康，讀到崩潰，雖然這樣很冒險，但我不想給自己任何退路，破釜沉舟，就為了往更好的學校邁進。</p><p>– 引自原文</p></blockquote><p>  筆者在校科目除了國文之外基本上都有顧。雖然因為不想對中央有所留念，完全放棄了系上活動與社交，連系服都沒有買；但還是有跟室友交朋友，該選大二宿舍時也跟室友一起組房，該選大二課時也有仔細選。<strong>所有的所有，就是為了給自己留條可以發展的後路。</strong></p><p>  之所以可以這麼做，筆者覺得是因為中央資工是有一定的水準，課程上並不會需要擔心系上的專業課程會不會是水課，教授了與轉學考相去太遠且無用的內容；同時因為是同系轉，顧好在校成績就相當於在讀考試科目了<sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="上學期是系排一；但下學期，恩，就放成績飛吧 owo（排名還沒出來，但肯定不會是第一，但還是有顧好，加權平均比上學期小低 0.68 分）。在這邊感謝我的數學都在幫我撐 /(\_ \_)\。">[5]</span></a></sup>。只是礙於筆者評估將來要研究的量子相關可用資源與教授在中央並不算多，所以打算轉學。如果是不同系轉的話，可以評估一下自己需不需要參考文章中的方式。</p><p>  此外，筆者在讀書時注重的也是過程而非結果；因為即使結果好壞，如果在過程中有做出符合自己人格標準的努力，那代表自己也是有所成長，並不需要也不必要否定自己在備考期間的一切努力<sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="這句話從一位成績中上者說出來顯然沒有說服力（倖存者偏差），但這確實是筆者從高中以來所抱持的長期理念。否則，如果這僅僅是因為考好而在寫心得時隨便套用的一句話，那這將無法成為筆者在學測大挫敗後重回正軌的支柱。考差後無疑是會對自己產生數不盡的自我懷疑與厭惡，但在重拾理智之後，還是需要有理地評估是否需要因為此事而無限上綱地妄自菲薄。筆者覺得每一段經歷都是獨特的，如果不斷地否定經歷、忽略收穫，那也相當於浪費了這段歲月。所以，請給自己更多的信心。">[6]</span></a></sup>。</p><p>  在選課上，筆者上學期還是有選一堂天文學導論（好課大推，可以學到很多東西！）；但下學期因為必修學分就已經 20 多了，也想要把心思轉移到轉學考上，所以就沒有再多選課（不然原本是想要選普通心理學的說）。</p><p>  更多準備過程的詳細資訊，請見接下來的心路歷程<span class="spoiler" onclick="this.classList.toggle('spoiler')"><span class="spoiler-blur ">流水帳</span></span>。</p><h3 id="心路歷程">心路歷程</h3><div class="note note-warning">            <p>這邊的內容全部都是依靠回憶寫出來的；時間有關的資訊不會是完全可靠的（除了有明確寫出數字的部分），如果覺得怪怪還請不要參考，並自行安排。</p>          </div><h4 id="前期（上學期）">前期（上學期）</h4><p>  雖然不太重要，先說一下筆者在算數學的時候是紙筆派，全部都是用計算紙算的。前期平平凡凡，幾乎每天都在讀微積分學習要訣，快速刷過一遍（每單元的習題除了考研的題目之外都有寫），到上學期中的時候就已經剩下原本在學校課程上排在下學期的雙重積分之後的所有章節。但在這之後，筆者就先跑去弄到那時候都還只有跟著學校進度的計概；先把計概看到這學期完。上學期結束，完全沒有碰英文 owo。</p><p>  雖然那時候各科雖然都還沒讀完，但基本上都還是有稍微瞄過去年的考古考了什麼，順便檢查一下自己現在的實力到哪（那時候顯然一堆都還不會寫，尤其是計概）。</p><hr><h4 id="中期（寒假到下學期期初考）">中期（寒假到下學期期初考）</h4><p>  上學期的寒假，把微積分的進度重新撿回來，將雙重積分之後的所有章節用 6 天的時間讀完<sup id="fnref:7" class="footnote-ref"><a href="#fn:7" rel="footnote"><span class="hint--top hint--rounded" aria-label="這個時間包括刷習題、理解，但請不要參考筆者的讀書進度；因為在高二時筆者就已經自學過雙重積分了，還是有點印象，所以那部分讀得飛快。">[7]</span></a></sup>。順便提個有趣的小統計：讀完這本微積分藍色磚頭書總共用了 200多張B5 + 22張A4 的計算紙，以下是筆者讀完之後和它的合照 owo：</p><p><img src="cal_fin.avif" alt="寫完啦！"></p><p>  差不多在寒假結束前一個禮拜開始看計概的書；因為感覺已經有點來不及了，所以這次目標是訂在期初考前就把所有進度看完（最後也是差不多那個時間簡略掃完）。在開學後買了英文的唯一一本參考書，開始慢慢刷考古，發現果然基本上都是單字的問題，並無大礙。</p><p>  各科的考古也差不多是在下學期開學後開始刷：計概大爆炸，一堆課內沒有的東西，那時候又找不到計概的考古，發現網路上唯一一本可以用的<span class="spoiler" onclick="this.classList.toggle('spoiler')"><span class="spoiler-blur ">心誠資料社</span></span>參考書被負評灌爆<sup id="fnref:8" class="footnote-ref"><a href="#fn:8" rel="footnote"><span class="hint--top hint--rounded" aria-label="筆者有問過有買這本書的朋友，他說只會給這本書 6 out of 10，因為裡面給錯的答案有點多。">[8]</span></a></sup>，有點小急。幸好最後在 Dcard 的某一篇文中找到了一個 Band 社群 - <strong>轉考電腦科學討論區</strong>，裡面真的超級多資源（再貼一次<a href="https://band.us/n/aaaf95p3a0Rfs">邀請連結</a>）。基本上中後期的計概筆者都是用裡面的資源讀，在此感謝這個社群的創辦者們。</p><p>  這個時候筆者開始和一位朋友一起約讀轉學考<sup id="fnref:9" class="footnote-ref"><a href="#fn:9" rel="footnote"><span class="hint--top hint--rounded" aria-label="筆者選擇不把自己要轉學考的資訊告訴任何人（ex: 室友、系上的人、朋友）；唯一除了這位跟筆者是高中同班的朋友。">[9]</span></a></sup>。兩人一起讀書還蠻有用的，這位朋友和筆者剛好可以互補對方不擅長的科目，可以在互相問問題的過程中真正確認自己是否有讀懂這方面的東西<sup id="fnref:10" class="footnote-ref"><a href="#fn:10" rel="footnote"><span class="hint--top hint--rounded" aria-label="筆者認為如果想要確認自己是否已經弄懂一個方面的知識，最快的方式就是直接找人試著教他看看，如果自己可以清楚表達前因後果與邏輯推理，那就差不多懂大部分了；如果可以用不同的描述方式讓對方聽懂，那就代表精熟。">[10]</span></a></sup>；有問題可以互相討論；同時也可以做為一部分的心理支撐，生活上不至於那麼孤獨。</p><hr><h4 id="後期（期初考到考試前）">後期（期初考到考試前）</h4><p>  這個時候除了固定刷各科考古題之外（建議每次寫都要計時，確保自己在考試當天有充分的時間可以用來檢查），筆者發現計概其實是最大的問題。微積分有範圍；英文雖然沒有範圍但就只有單字問題；但計概考出來的東西用筆者在課堂上學的知識去解題顯然完全不夠，所以除了詳讀兩本原文書之外，肯定是要自己一題題搜不會或是根本沒看過領域的題目。較進階的那本原文書教的東西與解釋方式比筆者上課用的那本還要好很多，推推 uwu。</p><p>  但計概讀到最後會開始不知道自己在讀啥，所以筆者轉而開始統計自己在考古中錯的章節，並依照錯誤題數一個一個慢慢細讀。一章可能就要讀一個禮拜或是以上，但收穫頗富，弄懂了之前因為快速掃過而沒有很懂的東西，像是 Security 底下的 Entity Authentication<sup id="fnref:11" class="footnote-ref"><a href="#fn:11" rel="footnote"><span class="hint--top hint--rounded" aria-label="雖然筆者還是搞不懂 MPEG 不同種 frame 的作用是啥，欸嘿 owo。">[11]</span></a></sup>，也學到了網路的新知識（這次轉學考剛好有考出來）。</p><p>  考前前兩個禮拜時突然心態小炸，但幸好發現了一篇筆者之前沒有看到的 <a href="https://www.dcard.tw/f/exam/p/234181769">Dcard 心得文</a>，有重新把心態撿回來，重回正軌。</p><p>  讀到最後考前一個禮拜，其實筆者已經開始沒有在讀什麼書了，除了刷剩下的英文考古之外就是等朋友問我問題；然後某天甚至還跑去做了個奇怪的含自迴神經網路<sup id="fnref:12" class="footnote-ref"><a href="#fn:12" rel="footnote"><span class="hint--top hint--rounded" aria-label="想當然爾肯定做爛了，但還是有學到新東西">[12]</span></a></sup>，也有跑去逛逛 Minecraft 底層程式碼。筆者也是差不多在這時候跑去訂考前前一天要住的飯店<sup id="fnref:13" class="footnote-ref"><a href="#fn:13" rel="footnote"><span class="hint--top hint--rounded" aria-label="因為高中社團，筆者養成了在重大事件前一天去場勘的習慣。個申時也是前一天就先去大學看看到考場的動線還有周遭的環境，隔天去的時候會比較安心自若。">[13]</span></a></sup>。新竹火車站周圍的飯店那時候竟然已經沒有單人房了，最後訂到的是這家：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Accommodation info: &#123;<br><span class="hljs-code">    名稱: 賓城商務旅館,</span><br><span class="hljs-code">    地址: 新竹市中正路13號5樓,</span><br><span class="hljs-code">    日期: 2023/6/30 ~ 2023/7/1,</span><br><span class="hljs-code">    房型: 經濟雙人房－無停車位（有備註禁菸房）,</span><br><span class="hljs-code">    價格: $1,170</span><br><span class="hljs-code">    個人評分: 6.5 ~ 7 out of 10</span><br><span class="hljs-code">&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>沒有評很高是因為櫃台環境與浴室，但筆者忘記拍它浴室的樣子了。同時評分也是跟筆者之前在個申時住的旅店相比，覺得蠻有差的。但服務人員態度真的很好，推這點。</p></blockquote><p>  這邊就容筆者偷懶不細說考前前一天場勘流程 owo，附上幾張當天拍的旅店內部：</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="hotel_1.avif" alt="房間內景1"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="hotel_2.avif" alt="房間內景2"></div><div class="group-image-wrap"><img src="hotel_3.avif" alt="房間內景3"></div></div></div><p>  最後小小拉回來一下，筆者基本上各科考古都只有刷台聯大近10年內，計概有刷到一點台綜的題目，但台綜出題方向真的跟台聯大相差太多了，所以到後期就沒有再寫了。微積分在後期時也有寫了 111、109 的台大C卷，但一份的量真的太多（差不多等於 2.5 ~ 3 份台聯大的題目）；那時候的目的也只是複習，筆者決定寫完這兩份就先停止，不要把時間耗在這上面。</p><hr><h4 id="考試當天">考試當天</h4><p>  考試當天 6:49 就從旅店出來，剛好趕上 6:50 的 182，搭到光復中學站去對面的全家吃早餐 + 預先買好午餐<sup id="fnref:14" class="footnote-ref"><a href="#fn:14" rel="footnote"><span class="hint--top hint--rounded" aria-label="筆者不敢去跟其他考生擠中午午餐，而事後從朋友那邊聽到確實是如此，大多時間都要拿去排隊qq。">[14]</span></a></sup>，吃完之後順著機車塔旁小徑一直直走，到盡頭時右轉再直走就是考場 - 台達館<sup id="fnref:15" class="footnote-ref"><a href="#fn:15" rel="footnote"><span class="hint--top hint--rounded" aria-label="這是場勘出來的最佳路線，因為台達館離最近的校內便利商店太遠，而且當天熱到炸開，完全不想出去買。">[15]</span></a></sup>。</p><p><img src="test_route.avif" alt="路線圖"></p><p>  順帶一提，當天天氣是典型的夏天，熱到走幾步路就會直接飆汗的那種。筆者考場在二樓，上二樓之後發現幾乎所有人都在看書，但筆者卻悠閒地逛了一圈之後再回來，順便確認洗手間位置（場勘時忘記先看大樓內部了）。筆者稍微再看了一下幾個常常忘記的級數展開，就進去考試了。</p><p>  教室（考場）裡面課桌椅品質優良，有冷氣，光線充足。考試前 5 分鐘會搖鈴（預備鈴），然後教室門就會開，可以開始進場。進場之後的注意事項如下（幾乎都是監考老師宣佈的內容）：</p><ol><li><strong>不行</strong> 碰到或 <strong>翻閱</strong> 桌上的試題本與答案卷，但可以先拿出你等一下會用到的文具並放在桌上。</li><li>要先在教室前面的臨時置物區放好你的背包，切記手機一律要關機且 <strong>不行放在身上</strong>。</li><li>確認位置上的 <strong>姓名與准考證號是否正確</strong>，並將身分證放在桌子的右上角，待稍後核對時用。</li><li>考場內禁止喝水。</li></ol><p>  再過 5 分鐘鈴響後就可以開始作答<sup id="fnref:16" class="footnote-ref"><a href="#fn:16" rel="footnote"><span class="hint--top hint--rounded" aria-label="趣事：當天考試時有一科提早了 1 分鐘搖錯鈴，外面的監考老師搖到一半就突然沒聲音了w。">[16]</span></a></sup>。筆者在這邊呼籲大家真的要檢查，筆者在考微積分時檢查出來 3, 4個錯，全部改掉惹 owo。上午考的依序是微積分、計概，都考 80 分鐘；下午就考英文（今年英文簡單到炸開），考 60 分鐘。快中午時筆者看一堆人都提早交計概考卷，雖然今年的計概是用中文出題，但有幾題顯然是難到炸開，根本不可能提早交卷，猜他們可能是想要先去搶還沒有那麼多人的店家吃午餐。筆者出考場之後發現果然人超少，於是就靜靜在那邊吃完午餐就小睡 25 分鐘，再起來閒逛吹風（不然真的會熱死）。</p><p>  下午時考英文無大礙，順利過關提早交卷，出來時一身輕。雖然那天考試時基本上就是平常心，但是是不允許出任何差錯的平常心，所以壓力還是很大。所以其實也沒有很輕，逛了校園<sup id="fnref:17" class="footnote-ref"><a href="#fn:17" rel="footnote"><span class="hint--top hint--rounded" aria-label="結果還遇到 3 位同班認識的人，笑爛，大家都沒有說www。">[17]</span></a></sup> 10 幾分鐘後就突然超級累，而且還要搭交通工具回台北，更累了qq（近期內從來沒有那麼累過，就算備考時也是）。</p><h4 id="考試結束後到放榜">考試結束後到放榜</h4><p>  考試完隔天發現原本預定當天才會發的解答其實昨天就先偷偷發了，對完後發現計概竟然只有錯兩題，比前一天算出來的期望值還要低，而且 Scheme 程式語言那題還有 IP 不夠的那題竟然 <strong>有邏輯地猜對</strong>，太幸運了！英文沒錯，微積分有一題題意不清，先不理它。在網路上搜尋題目時，筆者發現今年幾題特難的題目（像是 Scheme 語法、同子網域的 IP）其實是從<a href="https://www.public.com.tw/TestFileManage/17769/anspdf/111%E5%9C%B0%E6%96%B9%E7%89%B9%E8%80%83%E4%B8%89%E7%AD%89-%E8%A8%88%E7%AE%97%E6%A9%9F%E6%A6%82%E8%AB%96.pdf">去年的公務人員特考</a>把考題改一下之後就直接拿過來<span class="spoiler" onclick="this.classList.toggle('spoiler')"><span class="spoiler-blur ">出題教授甚至沒有把題目翻成英文</span></span>。</p><p>  但整體下來，筆者發現自己考完後並沒有像當初預定好的 <strong>不對答案</strong>、<strong>遊戲玩爆</strong> 那樣，反而超級緊繃，直到在 Dcard 上看了其他考生的想法之後才釋懷。開始嘗試放下所有考試相關的心態，學習如何讓自己享受玩遊戲的過程（幾個月沒有碰了，有點生疏）。</p><p>  這幾天跑來寫這篇文，希望能覆蓋到過去其他心得沒有講到的東西（雖然沒辦法提供讀書方式，因為就連筆者也不知道自己的讀書方式是甚麼 owo）。同時因為這篇文可能會有倖存者偏差的疑慮，就算正在讀文章的你對自己這次考試的結果不滿意，但覺得自己過程中的努力還是有用的，就來寫紀錄文吧！</p><h2 id="後記">後記</h2><p>  這篇文章沒有太多照片是因為筆者場勘＆考試當天沒有花太多心思在拍照上，雖然筆者原本就很少會拍照就是惹 owo。</p><p>  等成績公布、寫好這篇文、放榜、安頓好情緒之後，也是時候重新拾起人際關係交際、重新安排接下來的修課與人生目標啦。如果有上的話，也要請一下室友吃飯，畢竟之後可以見到面的機會可能不會很多，可能要做一下暫時的道別。</p><p>最後祝福看到這篇文的考生都可以依照自己的步調慢慢讀書，在最後考場上正常發揮。<br>那麼，就醬。</p><h2 id="贈書啦！">贈書啦！</h2><div class="note note-success">            <p>贈書活動已結束，謝謝各位！<br>收信用 Google 帳號已於 2023/08/16 11:39 AM 進行刪除。</p>          </div><p>  因為筆者已經不會再用到參考書們了，與其留在家裡還不如拿出來送有需要的人！</p><h3 id="送哪幾本">送哪幾本</h3><blockquote><p>有備註書況，基本上皆無缺頁、破損</p></blockquote><ul><li><strong>微積分學習要訣 第22版, 劉明昌博士</strong> <code>已有候選人</code><ul><li>除了幾題問題真的很大有直接寫在書上之外，99% 的頁數都是空白無計算痕跡。</li><li>有些之前有問問題的頁數可能會有小折角</li></ul></li><li><strong>微積分111~106年歷屆試題詳解, 劉明昌博士</strong> <code>已有候選人</code><ul><li>大部分的頁數應該都沒有被動到（因為筆者只有看台聯大的部分）</li><li>應該是無計算過程，但隱約記得好像有小小修正幾題的答案（解答給錯的部分）</li></ul></li><li><strong>計算機概論 重要題型 • 完全攻略, 蕭雄文</strong> <code>已有候選人</code><ul><li>使用情況是這幾本中最差的一本</li><li>因為筆者計概太多東西不會所以充滿了複數摺頁</li><li>計算過程和答案是直接寫在書上，貫穿整本無一倖免</li></ul></li><li><strong>台綜聯大轉學考英文用書, 李盛光</strong> <code>已有候選人</code><ul><li>107 ~ 101 年的台聯大都有使用痕跡（答案、更正有直接寫在上面）</li><li>有問題的地方一樣有摺頁或是其痕跡</li></ul></li></ul><blockquote><p>因為 Foundations of Computer Science 4/e 是筆者的教科書，而筆者一直以來都會保留教科書，所以沒有打算贈出 owo。</p></blockquote><h3 id="規則">規則</h3><p>  候選人的部分：優先度依照電子郵件傳送到 <a href="mailto:give.me.that.textbook0174@gmail.com">give.me.that.textbook0174@gmail.com</a><sup id="fnref:18" class="footnote-ref"><a href="#fn:18" rel="footnote"><span class="hint--top hint--rounded" aria-label="放心，這不是釣魚，是筆者剛剛因為怕自己主信箱可能會炸開所以去新註冊的電子郵件。">[18]</span></a></sup> 的時間先後排序，信件內容需包括索取的書名，如未包含將自動忽略。</p><p>取書方式：</p><ul><li>面交，範圍為台北市內捷運站（不包含機捷、輕軌）附近，需由候選人本人前往領取，不須負擔額外費用。</li><li>利用 7-11 的店到店服務（範圍為台灣本島），須負擔全額運費。</li></ul><p>  確認候選人後，會回信詢問取書方式（店到店會詢問收件者姓名、電話、目標門市；面交的話會協調捷運站點），並會將每本書是否已有候選人的狀態更新在此文中。如有人放棄、或是不符合上述規定，會依照電子郵件時間序次位進行遞補。</p><h3 id="資料保護">資料保護</h3><p>來信者資料會受到基本的個人資料保護：</p><ol><li>不獲取非必要資料（如身分證字號）</li><li>不將資料外洩給任何人</li><li>不以任何形式記下於電子信箱外之載體（於排序候選人、店到店過程需要時除外）</li><li>贈書活動結束後將刪除電子郵件帳號，期間不進行任何形式的備份</li><li>不將資料用於任何違反風俗習慣或是濫用之行為。</li></ol><h2 id="附錄：如何找原文書電子檔">附錄：如何找原文書電子檔</h2><ol><li>可以去名叫 Library Genesis 的網站（這個網站的網址不固定）用原文書的名字查書，並且注意版本。</li><li>有些人也會把電子檔放在 Github 上，可以用原文書名 + github 作為關鍵字查詢。</li><li>下載之後建議先上網找掃毒工具掃一下檔案。</li><li>完結。</li></ol><blockquote><p>不建議以 &lt;書名&gt; + free download 作為關鍵字，太多可能中毒的東西了。</p></blockquote><h2 id="註腳">註腳</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>爛到掉渣的那種，國中＆高中都嘗試救過了，但顯然沒興趣 + 救不回來，就連學測國文都是隨便亂猜到12級。之所以有列這個是因為記得不知道哪個單位之前資工系的有考過國文，但今年好像沒有。<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>那時候去諮詢 + 查資料是發現台綜會考物理，可是後來簡章出來才發現沒有。但其實也沒有差，因為台綜今年的名額根本沒有資工 qwq。<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>至少微積分上下學期學期成績都滿分（微積分大會考金牌 + 銅牌獎） + 上學期離散 95，下學期工程數學滿分。<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span>筆者覺得自己高中時補習沒有真正好好利用資源，有點像在把錢拿去燒的感覺，花一次就幾萬幾萬超級貴；所以這次考試期間就先嘗試自己讀（雖然參考書費也是蠻貴的，汗）。<a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span>上學期是系排一；但下學期，恩，就放成績飛吧 owo（排名還沒出來，但肯定不會是第一，但還是有顧好，加權平均比上學期小低 0.68 分）。在這邊感謝我的數學都在幫我撐 /(_ _)\。<a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span>這句話從一位成績中上者說出來顯然沒有說服力（倖存者偏差），但這確實是筆者從高中以來所抱持的長期理念。否則，如果這僅僅是因為考好而在寫心得時隨便套用的一句話，那這將無法成為筆者在學測大挫敗後重回正軌的支柱。考差後無疑是會對自己產生數不盡的自我懷疑與厭惡，但在重拾理智之後，還是需要有理地評估是否需要因為此事而無限上綱地妄自菲薄。筆者覺得每一段經歷都是獨特的，如果不斷地否定經歷、忽略收穫，那也相當於浪費了這段歲月。所以，請給自己更多的信心。<a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:7" class="footnote-text"><span>這個時間包括刷習題、理解，但請不要參考筆者的讀書進度；因為在高二時筆者就已經自學過雙重積分了，還是有點印象，所以那部分讀得飛快。<a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:8" class="footnote-text"><span>筆者有問過有買這本書的朋友，他說只會給這本書 6 out of 10，因為裡面給錯的答案有點多。<a href="#fnref:8" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:9" class="footnote-text"><span>筆者選擇不把自己要轉學考的資訊告訴任何人（ex: 室友、系上的人、朋友）；唯一除了這位跟筆者是高中同班的朋友。<a href="#fnref:9" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:10" class="footnote-text"><span>筆者認為如果想要確認自己是否已經弄懂一個方面的知識，最快的方式就是直接找人試著教他看看，如果自己可以清楚表達前因後果與邏輯推理，那就差不多懂大部分了；如果可以用不同的描述方式讓對方聽懂，那就代表精熟。<a href="#fnref:10" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:11" class="footnote-text"><span>雖然筆者還是搞不懂 MPEG 不同種 frame 的作用是啥，欸嘿 owo。<a href="#fnref:11" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:12" class="footnote-text"><span>想當然爾肯定做爛了，但還是有學到新東西<a href="#fnref:12" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:13" class="footnote-text"><span>因為高中社團，筆者養成了在重大事件前一天去場勘的習慣。個申時也是前一天就先去大學看看到考場的動線還有周遭的環境，隔天去的時候會比較安心自若。<a href="#fnref:13" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:14" class="footnote-text"><span>筆者不敢去跟其他考生擠中午午餐，而事後從朋友那邊聽到確實是如此，大多時間都要拿去排隊qq。<a href="#fnref:14" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:15" class="footnote-text"><span>這是場勘出來的最佳路線，因為台達館離最近的校內便利商店太遠，而且當天熱到炸開，完全不想出去買。<a href="#fnref:15" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:16" class="footnote-text"><span>趣事：當天考試時有一科提早了 1 分鐘搖錯鈴，外面的監考老師搖到一半就突然沒聲音了w。<a href="#fnref:16" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:17" class="footnote-text"><span>結果還遇到 3 位同班認識的人，笑爛，大家都沒有說www。<a href="#fnref:17" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:18" class="footnote-text"><span>放心，這不是釣魚，是筆者剛剛因為怕自己主信箱可能會炸開所以去新註冊的電子郵件。<a href="#fnref:18" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初衷</title>
    <link href="/2023/06/origin/"/>
    <url>/2023/06/origin/</url>
    
    <content type="html"><![CDATA[<!--lp:skip-all--><h2 id="前言">前言</h2><blockquote><p>筆者已經放棄修改語句通順性了，想到甚麼就寫甚麼！<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="結果後來還是修了一大堆，宿舍裡只有自己的感覺真放鬆 owo~">[1]</span></a></sup></p></blockquote><!-- 你多久沒有好好享受一部動畫了？｜亞次圓 --><div class="video-container"><iframe src="https://www.youtube.com/embed/W2GWkrd4ESc" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>久違的文章，晚上好。今天不講數學與程式，來記錄一下動漫如何影響筆者的人生目標。</p><h2 id="正文">正文</h2><p>  筆者初次接觸到刀劍時大約是小學時期，那時候連「動漫」或是「ACGN」的概念都還沒有，甚至還沒開始看輕小說<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="因為時間都拿去聽哈利波特英文書音檔了，反反覆覆聽了超級多遍，最喜歡的是第四集。">[2]</span></a></sup>。觀看心得筆者也想不起來多少，因為那時候的記憶沒有完整地保存到今日。只記得那時候有把動畫前兩篇看完，然後覺得動畫中的遊戲介面設計好好看owo<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="感謝 SAO Utils，讚嘆 SAO Utils，可以在電腦上重現刀劍的 UI 介面元件。">[3]</span></a></sup>。</p><p>  再次接觸到刀劍，是小學畢業後的暑假期間。筆者回去嘉義<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="筆者小學都在嘉義讀，之後就回來台北了。">[4]</span></a></sup>跟小學同學敘敘舊、聊一下新環境的感覺（可能差不多是醬？）。在某次聚會中，筆者發現了一位朋友剛好在看刀劍的輕小說，想說這是甚麼神奇的東西，所以就用筆電遊玩時間跟他換到了小說的閱讀權<sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="那位同學去玩筆者電腦裡的 Minecraft 了。">[5]</span></a></sup>（欸嘿。而筆者拿到的，就是那時上市沒多久的刀劍第三篇 - Alicization，可說是筆者在刀劍所有篇章中最感新奇且對本人來說最有影響力的篇章。</p><p>  不過，那次閱讀輕小說的過程卻沒有讓筆者對 Alicization 有留下任何深刻的印象。有可能筆者拿到的那本是 Alicization 的第二集，且第二集就完全以主角本身的視角去描寫 UW 世界了，完全沒有前後文，所以讀起來模模糊糊，完全不知道故事和世界觀到底要從何說起，有點小脫離。更何況，從今日的角度來看，Alicization 圍繞在以量子為基礎的世界觀上，那時候筆者甚至還沒開始對數學有興趣<sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="筆者小學與國中前半段成績都是吊車尾，完全不受讀書與成績所束縛。">[6]</span></a></sup>。就算小說中有提到相關知識，在無法認知的前提下；沒有任何印象嘛，也是相當合理的！</p><p>  在升上國中後不久，筆者就被班上朋友拉入了將長達數年的 ACGN 坑，開始嘗試各式各樣的動畫與輕小說。而在這期間，毫不例外地，筆者肯定也重新把刀劍重新拿回來看一遍，這才重新認識了 Alicization 世界觀。第一二篇圍繞著的 Full Dive 技術與龐大且自由的開放世界自然是相當吸引人<sup id="fnref:7" class="footnote-ref"><a href="#fn:7" rel="footnote"><span class="hint--top hint--rounded" aria-label="不包括沒有登出按鈕與死亡遊戲的部分。筆者現在最喜歡的還是開放世界面向的遊戲。">[7]</span></a></sup>，但 Alicization 的世界觀對筆者來說更勝一籌。那時候在看 Alicization 的時候還特別用了筆記本<sup id="fnref:8" class="footnote-ref"><a href="#fn:8" rel="footnote"><span class="hint--top hint--rounded" aria-label="這本筆記本裡面記了一堆筆者自己發明的文字（到現在都還有在用）、國中那時學的一些神秘數學東東、還有其他非常非常多神奇的內容。只可惜現在那本筆記本不知道去哪了。">[8]</span></a></sup>來記下裡面看起來就是神奇黑魔法的用語<sup id="fnref:9" class="footnote-ref"><a href="#fn:9" rel="footnote"><span class="hint--top hint--rounded" aria-label="筆者後來依照裡面的世界觀去完善了一個叫做 「刀劍神域世界觀」 的 Wiki 條目。那是筆者到目前唯一一次在 Wiki 上貢獻紀錄。">[9]</span></a></sup>。雖然那時候仍然不理解量子與其他深奧的東西到底是甚麼，但至少這神秘的世界觀與技術已經在記憶的某個角落悄悄萌芽。</p><p>  當然，也要提到一下筆者會踏入程式相關領域的原因。初次接觸到類似程式的東西，是在國三資訊課時的批次檔<sup id="fnref:10" class="footnote-ref"><a href="#fn:10" rel="footnote"><span class="hint--top hint--rounded" aria-label="那時候筆者用 .bat 寫了個小小的 GUI 輔助工具，好像有保存下來，現在或許還被封印在哪個隨身碟裡面。">[10]</span></a></sup>。但在那時候剛好發生了小插曲，然後筆者就跑去弄會考了qq。經過差不多半年之後就去考了會考，就這麼上了第一志願<sup id="fnref:11" class="footnote-ref"><a href="#fn:11" rel="footnote"><span class="hint--top hint--rounded" aria-label="會這麼拚幾乎都是因為某個對筆者來說相當重要的人。">[11]</span></a></sup>，期間完全沒有再碰過程式，ACGN 也就這麼漸漸從生活淡出。到了高一後，除了輕小說一開始還有固定出新書的時候就溜去書店買來看之外，動漫方面就已經是隔了幾個月才想起來原本要看的，一次看超多之後就直接放著完全不再去理的狀態。在國中時期那種自由瀏覽、沉浸於其中的樂趣也已不復存。最後連輕小說都已經不再買，全部變成脈衝式觀看的壞習慣了。</p><blockquote><p>也就是在這時候，筆者把 Alicization 與其他 ACGN 的東西幾乎是忘了一乾二淨了。</p></blockquote><p>  高中，現在總結來說，不必要且不幸運地慘。高一上很愉快，高一下後發生了小插曲後，精神狀態完全驟降到谷底。如此低落且無目標的「人生漫遊」現象一直持續到高二下或許都沒有好起來過。也是因為如此，所以那時候的學科基礎完全沒有打好，學科生活心理全部雜成一團。同時因為小插曲所以防禦心直接飆高到炸開，對同學或是社團朋友根本從來沒有開放到可以到談心的程度<sup id="fnref:12" class="footnote-ref"><a href="#fn:12" rel="footnote"><span class="hint--top hint--rounded" aria-label="這段時間還是有極少數的例外幾位。對筆者來說，主要的朋友可以被分成兩種：「摯友」是被筆者認定為可以互相談心、還有講過各式各樣的「小插曲」為何物的階級。「好友」是意識中認定為有親切感或是可對等相處的人，也就是可以通過筆者防禦心的人。通常只有這兩類筆者才會時不時聯絡、抑或者是對談時沒有拘束。這兩種朋友的面向也完全不同，幾乎沒有上下之別。對於其他，可能就只是僅止於「同學」、「社團同事」、或者是「認識的人」。">[12]</span></a></sup>。</p><blockquote><p>負面描寫就先到這邊，重新轉回程式與刀劍部分</p></blockquote><p>  即使對 ACGN 的印象可能只剩下零落的碎片，筆者對於 Alicization 世界觀的嚮往還是以另外一種形式表現出來。在高一上的寒假期間筆者參加了實屬人生難忘的一次社團寒訓，其中某天的一堂量子運算課程倖存者好像就只剩下筆者、講師、與各學長姊而已<sup id="fnref:13" class="footnote-ref"><a href="#fn:13" rel="footnote"><span class="hint--top hint--rounded" aria-label="筆者在那天也順便獲得了「量子小灰灰」的永久稱號 \\^~^/。">[13]</span></a></sup>。那時感受到的莫名熟悉與好奇感，讓筆者在高一下時開始了一連串的量子運算學習過程、跟黑黑成立了SQCS、寫了小論文、還有參加了一堆活動。對那時候仍處在人生漫遊中的筆者來說，量子運算和社團幾乎可以說是作為生活的依靠<sup id="fnref:14" class="footnote-ref"><a href="#fn:14" rel="footnote"><span class="hint--top hint--rounded" aria-label="亦或是純粹的逃避，但是是必要的逃避，不然精神可能真的會支撐不下去，所以現今撰寫這篇文的筆者接受那時候自己的行為。">[14]</span></a></sup>。</p><p>  即使做了那麼多，那個時候的筆者並沒有意識到學習量子運算的初衷，是源自於對 Alicization 世界觀的嚮往。這點即使到了高二下學期中 Alicization 的動漫播出時也是一樣。所以在不久之後，筆者就已經在多個複雜且無法理解的量子演算法中，喪失了學習量子運算的動力了。直到高三升學，筆者或許都還不知道自己對於程式的主要動力究竟是來自於何處。畢竟筆者已經確認過競程並不會，也將不會是未來的目標導向：過於簡短且富有著過多理性的數學算式；生硬且摸不著頭緒的題序從來就不是筆者的菜<sup id="fnref:15" class="footnote-ref"><a href="#fn:15" rel="footnote"><span class="hint--top hint--rounded" aria-label="筆者當初會入坑數學純粹是想要描述生活中的各種現象，也就是實用性為導向。而競程在這點上，至少在筆者親身接觸與體驗後，並不符合。不過筆者也不否定其中所蘊含的知識相當有用，只是純粹不喜歡這些知識透過「競程」這個面向表現出來而已。學習知識應當是可以透過自己有脈絡地、有原因地、有步調地自發性學習。也有可能是筆者只是純粹討厭競賽面向的東西而已（說不上來的排斥感）。">[15]</span></a></sup>。</p><p>  就這樣懵懵懂懂的上了大學，直到前陣子突然想起刀劍 Unital Ring 差不多應該要出新小說了，才急急忙忙去看 27 集的時候；或許是將近晚上 11 點才在喝奶茶所造成的亢奮作用下<sup id="fnref:16" class="footnote-ref"><a href="#fn:16" rel="footnote"><span class="hint--top hint--rounded" aria-label="雖然聽起來蠻奇怪的，但當下真的蠻亢奮，直接變成快要失眠。下次遇到人生難題時再來喝杯奶茶好了！">[16]</span></a></sup>，筆者的腦袋瞬然進入了超我的神秘境界<sup id="fnref:17" class="footnote-ref"><a href="#fn:17" rel="footnote"><span class="hint--top hint--rounded" aria-label="沒，純粹唬爛。">[17]</span></a></sup>。那時才重新喚起了整個人生經歷，也重新認定了筆者自己在學習程式與量子運算的初衷僅僅只是想要重現 UW 的整個架構，也就是利用虛擬世界去訓練出 AGI。雖然這個目標看起來相當不符合實際：不論是量子腦的假設、在量子不可複製原理之下還要創建精神原型、實現 LightCube 所需要的大量量子位元數、其可在常溫下保存的表現、甚至是量子電腦還需要發展到可以進軟體開發的程度。但這些東西相較於 Full Dive 技術來說或許還比較有可能實現；因為後者光是在截斷人類對於外界的感知的這點上，就幾乎不可能通過倫理上的考量；還有 BMI 技術的方面也暫時沒辦法在不進行植入的狀況下進行更為細緻的操作。</p><p>  雖然這個初衷遠比想像的來得遠，但至少筆者已經在前幾天順便回去看了之前一直認定為大魔王的 Grover’s Algo，而且看懂了<sup id="fnref:18" class="footnote-ref"><a href="#fn:18" rel="footnote"><span class="hint--top hint--rounded" aria-label="直到前幾天前，筆者的量子運算知識已經處於放置狀態快要2年多了，但上大學後理解能力真的有上升。Grover's Algo 並不是基於「知道答案是甚麼」，而是「知道答案的規則」才去實作 $U_s$ 閘，兩者在學習時候並沒有被特別點出，但實質上完全不一樣，也是筆者一直以來的癥結點。">[18]</span></a></sup>！或許是一小步也說不定。總之雖然未來或許還會有一堆現實層面需要考量，但最終目標已定。希望下次不會再忘記初衷了。</p><p>就醬。晚安。</p><h2 id="註腳">註腳</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>結果後來還是修了一大堆，宿舍裡只有自己的感覺真放鬆 owo~<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>因為時間都拿去聽哈利波特英文書音檔了，反反覆覆聽了超級多遍，最喜歡的是第四集。<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>感謝 SAO Utils，讚嘆 SAO Utils，可以在電腦上重現刀劍的 UI 介面元件。<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span>筆者小學都在嘉義讀，之後就回來台北了。<a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span>那位同學去玩筆者電腦裡的 Minecraft 了。<a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span>筆者小學與國中前半段成績都是吊車尾，完全不受讀書與成績所束縛。<a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:7" class="footnote-text"><span>不包括沒有登出按鈕與死亡遊戲的部分。筆者現在最喜歡的還是開放世界面向的遊戲。<a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:8" class="footnote-text"><span>這本筆記本裡面記了一堆筆者自己發明的文字（到現在都還有在用）、國中那時學的一些神秘數學東東、還有其他非常非常多神奇的內容。只可惜現在那本筆記本不知道去哪了。<a href="#fnref:8" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:9" class="footnote-text"><span>筆者後來依照裡面的世界觀去完善了一個叫做 「刀劍神域世界觀」 的 Wiki 條目。那是筆者到目前唯一一次在 Wiki 上貢獻紀錄。<a href="#fnref:9" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:10" class="footnote-text"><span>那時候筆者用 .bat 寫了個小小的 GUI 輔助工具，好像有保存下來，現在或許還被封印在哪個隨身碟裡面。<a href="#fnref:10" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:11" class="footnote-text"><span>會這麼拚幾乎都是因為某個對筆者來說相當重要的人。<a href="#fnref:11" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:12" class="footnote-text"><span>這段時間還是有極少數的例外幾位。對筆者來說，主要的朋友可以被分成兩種：「摯友」是被筆者認定為可以互相談心、還有講過各式各樣的「小插曲」為何物的階級。「好友」是意識中認定為有親切感或是可對等相處的人，也就是可以通過筆者防禦心的人。通常只有這兩類筆者才會時不時聯絡、抑或者是對談時沒有拘束。這兩種朋友的面向也完全不同，幾乎沒有上下之別。對於其他，可能就只是僅止於「同學」、「社團同事」、或者是「認識的人」。<a href="#fnref:12" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:13" class="footnote-text"><span>筆者在那天也順便獲得了「量子小灰灰」的永久稱號 \^~^/。<a href="#fnref:13" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:14" class="footnote-text"><span>亦或是純粹的逃避，但是是必要的逃避，不然精神可能真的會支撐不下去，所以現今撰寫這篇文的筆者接受那時候自己的行為。<a href="#fnref:14" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:15" class="footnote-text"><span>筆者當初會入坑數學純粹是想要描述生活中的各種現象，也就是實用性為導向。而競程在這點上，至少在筆者親身接觸與體驗後，並不符合。不過筆者也不否定其中所蘊含的知識相當有用，只是純粹不喜歡這些知識透過「競程」這個面向表現出來而已。學習知識應當是可以透過自己有脈絡地、有原因地、有步調地自發性學習。也有可能是筆者只是純粹討厭競賽面向的東西而已（說不上來的排斥感）。<a href="#fnref:15" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:16" class="footnote-text"><span>雖然聽起來蠻奇怪的，但當下真的蠻亢奮，直接變成快要失眠。下次遇到人生難題時再來喝杯奶茶好了！<a href="#fnref:16" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:17" class="footnote-text"><span>沒，純粹唬爛。<a href="#fnref:17" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:18" class="footnote-text"><span>直到前幾天前，筆者的量子運算知識已經處於放置狀態快要2年多了，但上大學後理解能力真的有上升。Grover’s Algo 並不是基於「知道答案是甚麼」，而是「知道答案的規則」才去實作 $U_s$ 閘，兩者在學習時候並沒有被特別點出，但實質上完全不一樣，也是筆者一直以來的癥結點。<a href="#fnref:18" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>有關歐拉定理</title>
    <link href="/2023/02/about-eulers-theorem/"/>
    <url>/2023/02/about-eulers-theorem/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>如副標，只是記錄一下自己複習的歐拉定理證明流程 owo。</p><blockquote><p>所以才沒有專屬放上精美的封面</p></blockquote><h2 id="正文">正文</h2><p>創建兩個集合，$S$ 包含所有小於且與 $n$ 互質的不重複的數；$S_a$ 則是 $S$ 中的所有元素都乘上一個與 $n$ 互質的數 $a$。</p><p>$$\begin{align*}&\text{let}\quad S = \set{e\mid \forall\, e(e\ \bot\ n) \wedge (0 < e < n)};\ \Rightarrow |S|=\varphi(n)\\&\text{let}\quad S_a=\set{a\cdot e\mid \forall\,e\in S},\enspace a\ \bot\ n\end{align*}$$</p><p>證明：$S_a$ 中的元素在模 $n$ 之下跟 $S$ 中的元素是完全相同且不重複的。</p><p>$$\begin{align*}&\text{Notice that if}\quad ae_1\equiv ae_2 \pmod n\\&\Rightarrow a(e_1-e_2)\equiv 0 \pmod n\\\end{align*}$$</p><p>然而，因為 $a$ 與 $n$ 互質、$e_1 - e_2$ 也不可能大於 $n$，因此唯一可能的就只有 $e_1 = e_2$。</p><p>但因為 $S$ 中的元素不重複，故此條件不可能符合，進而導致此假設不可能成立。因此在 $S_a$ 中的元素在模 $n$ 之下是完全不重複$^{(1)}$、小於 $n$ $^{(2)}$、且與 $n$ 互質的$^{(3)}$。</p><p>如要符合 (1) &amp; (2) &amp; (3)，代表 $S_a$ 中的元素會完全與 $S$ 中的一樣。因此得出：</p><p>$$\begin{align*}\prod_{e\ \in\ S}e &\equiv \prod_{\varepsilon\ \in\ S_a}\varepsilon \pmod n\\&= \prod_{e\ \in\ S}ae\\&= a^{|S|}\prod_{e\ \in\ S}e\\&= a^{\varphi(n)}\prod_{e\ \in\ S}e\\\end{align*}$$</p><p>通過消去左右兩邊元素的乘積（因為 $\prod e$ 仍與 $n$ 互質），得出證明：</p><p>$$\begin{align*}\prod_{e\ \in\ S}e &\equiv a^{\varphi(n)}\prod_{e\ \in\ S}e \pmod n\\\Rightarrow a^{\varphi(n)} &\equiv 1 \pmod n\ _\blacksquare\end{align*}$$</p>]]></content>
    
    
    
    <tags>
      
      <tag>mafs</tag>
      
      <tag>life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>關於中國剩餘定理</title>
    <link href="/2023/02/about-chinese-remainder-theorem/"/>
    <url>/2023/02/about-chinese-remainder-theorem/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>筆者在高中時候有段時間跑去學基礎數論，當時候基礎運算、費馬小定理甚麼的都懂了，就是不懂中國剩餘定理，遺恨千年 qwq。</p><p>剛剛恰好讀到跟數論有關的東西，就想起以前這個小遺憾，所以給自己 <code>1</code> 小時的時間重新複習同餘運算並挑戰弄懂中國剩餘定理。結果真的成功了！</p><h2 id="正文">正文</h2><h3 id="預備知識">預備知識</h3><p>以下是我這 <code>1</code> 小時內看的東東（依照時間排序），對我理解非常有幫助：</p><ul><li><p>同餘基本運算</p><ol><li><a href="https://ithelp.ithome.com.tw/articles/10205727">Day 14:[離散數學]同餘（Mod）是什麼</a></li></ol></li><li><p>中國剩餘定理</p><ol><li><a href="https://ithelp.ithome.com.tw/articles/10205772">Day 15:[離散數學] 中國餘式定理</a>（文章）</li><li><a href="https://www.youtube.com/watch?v=ru7mWZJlRQg">The Chinese Remainder Theorem made easy</a>（影片）</li><li><a href="https://www.youtube.com/watch?v=e8DtzQkjOMQ">The Chinese Remainder Theorem (Solved Example 1)</a>（影片）</li></ol></li></ul><p>不過對於 <code>Day 14:[離散數學]同餘（Mod）是什麼</code> 中的 <code>同餘的相乘性質</code>，筆者有不同的見解。從文章中的講解來看，初學者（像是正在複習N年前學的東西的筆者）並不會知道第一式要乘上 $c$；第二式要乘上 $b$ 來證明這個東東，因此筆者臨時想出了另外一個感覺比較簡單的證明流程（基於變數變換）：</p><p>Statement:</p><p>$$\begin{align*}a &\equiv b \pmod k,\\c &\equiv d \pmod k\\\Rightarrow ac &\equiv bd \pmod k\end{align*}$$</p><p>Proof:</p><p>$$\begin{align*}c &= kp + r,\\d &= kq + r\\\Rightarrow c-d &= k(p-q) = kn\\\Rightarrow c &= d+kn \tag{1}\end{align*}$$</p><p>$$\begin{align*}ac &\equiv bc \pmod k \tag{known fact}\\\Rightarrow bc &\equiv b(d+kn) \equiv bd \pmod k \tag{by (1)}\\\Rightarrow ac &\equiv bd \pmod k\ _\blacksquare\end{align*}$$</p><h3 id="過程理解">過程理解</h3><blockquote><p>p.s. 筆者原本想把整個理解過程都打下來，但這樣會變成超長篇大論，因此理解過程就請讀者自行觀看上述文章與影片囉 \^~^/</p></blockquote><p>其實就是影片中的東西以筆者的理解語言複述一遍，以下是筆者自己理解的步驟：</p><ol><li><p>將 $x$ 構造出 $k$ 個部分，每個部分將會在同餘 $m_i$ 之下時顯現出獨立特性。</p><blockquote><p>在這一步定義 $M,\ M_i$，並先令每個部分都是 $M_i$。</p></blockquote></li><li><p>將獨立部分暫時湊出理想值</p><blockquote><p>在這一步將每個部分前方乘上 $a_i$</p></blockquote></li><li><p>利用反元素進行修正</p><blockquote><p>在這一步將每個部分後方乘上 $M_i^{-1}(m_i)$</p></blockquote></li><li><p>將所有部分合起來</p></li></ol><p>$$x = \sum a_i\cdot M_i\cdot M_i^{-1}(m_i)$$</p><ol start="5"><li>加上週期修正項<blockquote><p>有點解基礎偏微分聯立方程時偏積分後要加上缺少項的感覺 owo</p></blockquote></li></ol><p>$$x = \sum a_i M_i M_i^{-1}(m_i) + Mk,\enspace k\in\mathbb{Z}$$</p><ol start="6"><li>完成！\^~^/</li></ol><h2 id="後記">後記</h2><p>現在看整個過程在視覺化的幫助下其實應該蠻簡單的，只是筆者早期有陋習 - 甚麼東西都去 wiki 看。而 wiki 上中國剩餘定理頁面中的證明又寫得又亂又長（氣），所以筆者當時才會花了幾乎一整天盯著那個頁面看，結果最後還是靠直覺理解，然後隔天就忘掉了（所以到頭來根本沒有弄懂 owo）。</p><p>不過現在弄懂就是超級開心的啦 \^~^/ \^~^/ （灑花！</p><p>那就先醬。</p>]]></content>
    
    
    
    <tags>
      
      <tag>mafs</tag>
      
      <tag>life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【更新】隆重介紹 canvas-noice.js</title>
    <link href="/2023/02/introduce-canvas-noice.js/"/>
    <url>/2023/02/introduce-canvas-noice.js/</url>
    
    <content type="html"><![CDATA[<!--lp:skip-some--><!--sprp:skip-all--><h2 id="更新">更新</h2><p>筆者在修好了幾個東西之後，將本套件重新整理並命名成 <code>canvas-nice.js</code> 作為正式版發布名稱。</p><p>主要修改原因，是因為 <code>canvas-noice.js</code> 可以自訂的參數量過多，且在已經做出足夠多優化後，必須要以輕量化面向。因此將類重力模擬、<code>FPS Manager</code>、等其他過於實驗性或是多餘的功能移除；但裝上數個以繪圖客製化為導向而非溢出性性能優化的參數設定。</p><p>以下文章以黃色區塊框起來的地方為一些小修改以及筆者對自己的吐槽 owo。</p><h2 id="前言">前言</h2><p>耶，終於實作出來了！</p><p><img src="https://images.chesscomfiles.com/uploads/v1/images_users/tiny_mce/thematedkid/phpPlfUuy.gif" alt="感想"></p><h2 id="正文">正文</h2><p>筆者很久以前就對 <code>canvas-nest.js</code> 有印象，看著這個動畫既紓壓又療癒 \^~^/。簡單來說，他就是一個輕量型（？）的網頁背景動畫，模擬數十至數百乃至一千出頭個點作隨機運動；兩點之間以線連接，形成一大型網狀結構，同時也可與游標互動。</p><blockquote><p>有興趣者可以來<a href="https://git.hust.cc/canvas-nest.js/">這邊看 demo</a></p></blockquote><p>在開始學了一些 html 之後開始寫些網頁時，才正式在網頁中使用了這個功能。</p><p>但這時就要講到這個套件的缺點。上述所謂 <strong>輕量型</strong> 是指對 <strong>檔案大小</strong> 來說（&lt; 10KB）；但在效能方面它卻一點都不輕量。為什麼呢？</p><p>如果去翻翻看原始碼，就會發現作者<strong>直接用爆搜</strong>計算所有點之間的互動，而也沒有優化畫線的過程，造成整個程式非常吃效能，FPS 也不高。</p><h3 id="計算量優化">計算量優化</h3><p>在同樣設定下（1000 個點；互動半徑 77.46 像素；不模擬重力），<code>canvas-nest</code> 跑出來的成績只有 13.8 FPS，如下圖：</p><p><img src="nest.avif" alt="canvas-nest performance"></p><p>而在同樣設定下，使用筆者優化過後的演算法與資料型態建構出的新套件 <code>canvas-noice.js</code>，則是把 60 FPS 跑好跑滿。</p><p><img src="noice.avif" alt="canvas-noice performance"></p><p>為什麼會有如此巨大的差別？原因在於兩個重大的優化 - <code>chunks</code> 與 <code>draw buffer</code>。</p><p>在原套件中使用的遍歷算法是<strong>爆搜</strong>，時間複雜度是 $O(N^2)$，我們簡單算一下遍歷 1000 個點所需要的運算次數：</p><!--lp:skip-some--><p>$$\binom{1000}{2}=499500$$</p><!--lp:skip-some--><p>而 <code>canvas-noice.js</code> 利用 chunks 優化過後的遍歷量大約在 <code>44500</code> 上下浮動，運算量差了大約 11.22 倍。這也就是利用一些空間換取時間的古老手法 owo。</p><blockquote><p>以筆者的測試環境來說，大概建了 <code>120</code> 塊 chunks</p></blockquote><div class="note note-warning">            <p>筆者現在才發現因為不用模擬重力、遍歷的方向性又已經被決定了，所以可以從根本上減少試算的次數，現在在同樣設定下計算次數已經降到了大約 <code>22000</code> 次，優化了 <code>22.7</code> 倍計算量。</p>          </div><p><img src="noice-1.webp" alt="chunks 加速"></p><p><img src="noice-0.webp" alt="一些後台數據"></p><h4 id="chunks-的實作流程">chunks 的實作流程</h4><p>為什麼要實作 chunks？</p><p>因為原作者是把所有點都存在一個一維陣列中，而我們要計算哪些點在某個點的互動範圍內時，就只能幾乎全部都看過一遍。</p><p>如果把點存在二維陣列中，就只需要把點本身所在的格子與鄰近8個格子納入計算對象就好了。</p><p>如果我們將空間切成多個小小的正方形空間，稱為 chunks。每個 chunks 中可以有數個點，並先假設 chunks 的寬高至少比互動半徑還要大。</p><p>今天有一點 $p$ 在某個 chunk 中，我們想要計算它與哪些點有交互作用。那我們可以利用爆搜先算完它與<strong>它那格 chunk</strong> 中的所有點的交互作用，再計算它與周遭八個 chunks（上下左右與四個角）中點的交互作用。如此一來就完成了計算，不需要算完整個陣列的點。</p><p>實作上當然就是用最簡單的二維陣列實作 chunks；用 array 紀錄當中的點。</p><blockquote><p>筆者原本想要用 linked-list，但越寫越多 bug，果斷放棄重投 array 的懷抱 owo</p></blockquote><p>題外話：使用 chunks 後的時間複雜度難以估算，筆者算了一個晚上的數學建模後得出來的最簡單狀況下的時間複雜度<strong>可能是</strong> $O(w\cdot h)$，$w,\ h$ 是每塊 chunks 的寬高。</p><!--lp:skip-some--><div class="note note-warning">            <p>這邊應該忘記乘上 $P$（點的數目）了，然後這個結果應該是在 $w,\ h$ 都跟 $r$（互動半徑）差不多時的複雜度。</p><p>所以可以把時間複雜度寫成</p><p>$$O(P\cdot r^2)$$</p><p>而空間複雜度就是</p><p>$$O(r^{-2})$$</p><blockquote><p>但這仍然是簡單版模型推算出來的結果</p></blockquote>          </div><!--lp:skip-some--><div class="note note-warning">            <p>改版之後之所以不用<strong>好像</strong>更好的空間分割資料結構 - 四元樹（QuadTree）是因為它非常不擅長應對動態的物件（像是跑來跑去的點），它比較擅長應對靜態物件 owo。<br>筆者在寫這篇文後有用其他人寫好的輕量化 quadtree module 寫了個 qt 的版本，但頂多只能跑到 800 個點之後，fps 就直直往下墬直接見底；就算順了 fps 也不太穩定，所以放棄了這個版本。</p><p>還是好好用 chunks 吧。</p><p>os: 把點全部放進去 qt + 全部查詢過一遍碰撞候選點 + 直接把 qt 丟掉 的代價真的太大惹啦 qq。</p>          </div><h3 id="繪圖優化與實作流程">繪圖優化與實作流程</h3><p>這個應該是最主要的優化了，原本 1000 個點只能跑 22 FPS 的 <code>canvas-noice</code> 在經過繪圖優化後直上 60 FPS。</p><p>據筆者爬文後獲得的結果，html canvas 中如果每畫一個點就調用一對 <code>ctx.beginPath() ... ctx.stroke()</code> 的話，將會使效能嚴重降低。<br>但因為 <code>canvas-nest</code> 在畫線時每次都有不同的屬性：<code>strokeStyle</code> 與 <code>lineWidth</code>，不得不每次都調用一對上述的程式碼，否則畫出來的線樣式會完全錯亂。</p><p>筆者自己在經過思考後，決定利用 <code>draw buffer</code> 解決這問題，以下是思考邏輯：</p><p>如果我們必需要在一對 <code>ctx.beginPath() ... ctx.stroke()</code> 中把所有有著同樣屬性的線一次畫完，那就先建立類似 map 的東西，將所有有著相同屬性的線都存起來一次畫，反正畫線先後順序根本沒有差。</p><p>正好，可以用參數 <code>alpha</code> 同時決定 <code>storkeStyle</code> 與 <code>lineWidth</code>，那代表我們只要以 <code>alpha</code> 作為 key 就好了。筆者在實作上將 <code>alpha</code> 做簡單的轉換後拿來當 array 的 index（總共可以分成 9 類），做出跟 map 一樣的效果。這個二維 array 就稱為 <code>draw buffer</code>。</p><p>實做這個東西後，大概降低了幾次上述<strong>程式碼對</strong>的呼叫呢？</p><p><img src="noice-3.webp" alt="一直行的線數目"></p><p>從這張圖可以看出，在有 15 行的狀況下，每一行所需要畫的線總數大約落在 1000 條上下。也就是說，原本會呼叫到 1000 次的程式碼對，現在只會呼叫到至多 9 次，差不多是 111 倍的差距。</p><blockquote><p>一幀差不多要畫 15000 條線，電腦你辛苦惹 owo。</p></blockquote><div class="note note-warning">            <p>現在的繪圖緩衝區對於<strong>線</strong>與<strong>圓</strong>的緩衝區大小都是 1000，再高也不會變比較好。<br>筆者猜是因為沒有 GPU 輔助的 canvas 繪圖效能可能真的已經到極限了，如果要再上去會需要到 webgl。</p><p>除了嘗試自己實作 webgl 外，可以用的套件有 pixi.js，但是光 rollup 就要 20 秒，api又難用，放棄。</p><p>還有一個比較友善的是寫好的 canvas2d to webgl 模組，可是那模組大小直接大於 50KB（筆者沒詳細算所有 dependencies 加起來到底有多大），顯然對輕量型模組非常不友善。如果筆者到時候有去玩 webgl 的話可能再發布一個有 webgl 加速的版本吧 owo。</p>          </div><div class="note note-warning">            <p>吐槽++：現在的筆者已經試圖用過 <code>jagenjo / Canvas2DtoWebGL</code> 實作一個 webgl 加速版本了。但它api竟然沒有寫好 (氣)，畫點的功能出bug、線條粗細出 bug、一堆咚咚都一直出 bug，然後效能甚至變爛了，webgl 版本還是先算了吧 qq。</p>          </div><p>而也有另外一個優化可以大幅降低（筆者猜大概比一半少一點）要畫的線數目，那就是 <strong>chunk divergence</strong>。筆者會想出來這種優化方式是最近剛好在學散度與旋度。</p><p>如果我們在實作 chunks 後卻在計算時畫每條線，那每條線實質上都會是重疊的 2 條線，因為會重複計算兩次。</p><p>現在把畫一條線的過程想成一種 flow 從中心點流向其他與之連接的點，只畫一條線的最快方式就是讓其中一個點的散度變成 1；另一個變成 0。<br>這樣，flow 就會從散度高流向散度低的點；而不會逆流回去。但是要如何實作這種性質？我們可以將 chunks 想成黑白相間的西洋棋盤，其中黑色代表高散度；白色代表零散度。這樣的區域性性質會影響到其中的所有點，也就是說每個點的散度取決於它所在的格子是白色還是黑色的。</p><p>畫線時，我們可以先用<strong>聰明的爆搜</strong>保證同一格子中的兩點之間只會有一條線；而不同 chunks 之間的畫圖的判斷用以下 pseudocode 說明：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">need_draw = origin_chunk.<span class="hljs-property">div</span> || (origin_chunk.<span class="hljs-property">div</span> === target_chunk.<span class="hljs-property">div</span>);<br></code></pre></td></tr></table></figure><p>也就是說：要不要畫線取決於點所在 chunk 本身的散度；或是當 chunk 本身與目標 chunk 有一樣的散度時才要畫線。</p><p>這樣一來，我們可以保證至少兩鄰近 chunk 之間的每一點只會畫一條線，但對角線的 chunks 還是會重複畫兩條線。</p><blockquote><p>後者應該可以用 row &amp; column 的方向性解決，但筆者還沒實作 OwO。</p></blockquote><div class="note note-warning">            <p>啊 現在實作完了。</p><p>之前的遍歷演算法有些錯誤點（這邊的散度設定其實也沒有必要），還是會算到重複的東西。其實只要學<strong>聰明的爆搜</strong>一樣決定遍歷的方向性就可以省去很多的檢查，只不過二維的狀況還是要設代表遍歷過的flag。</p><p>筆者在新版本中已經把遍歷算法修好，也把散度設定移除了。用好方向性之後在 1000 個點的狀況下大概減少了 2000 次要試算互動距離的計算量。</p><p>不過沒能用上散度的設定真是可惜 qwq。</p>          </div><h3 id="FPS-自動偵測">FPS 自動偵測</h3><p>除了主程式之外，筆者也拿了個網路上的小程式，客製化之後塞在程式碼中（<code>fps_manager</code>），會自動比對你的電腦在沒有跑 <code>canvas-noice.js</code> 時的平均 FPS 與跑了之後的效能差異。如果兩者差太多會自動減少目前螢幕上的點數量 \^~^/。</p><div class="note note-warning">            <p>其實這東西蠻好的，只是拿掉變成輕量化之後，就要全部相信各位站長自己設定的參數不會讓訪客的電腦炸開，因為沒有fps檢查 owo。（像是什麼 3000 個點然後線超粗）</p>          </div><h3 id="為什麼是取名-canvas-noice">為什麼是取名 canvas-noice ?</h3><p>因為是 <code>canvas-nest.js</code> 的優化版，自然就想要取個類似但有正面意義的名字，所以就想到了這張梗圖：</p><p><img src="https://media.tenor.com/HhdLXIxTKfEAAAAC/noice.gif" alt="noice"></p><div class="note note-warning">            <p>用梗圖拿來當正式版名稱顯然太不正經了，所以就換回來正常點的吧。owo</p>          </div><h3 id="專案連結">專案連結</h3><div class="note note-warning">            <p>這邊的連結都修改成正式版 <code>canvas-nice.js</code> 的了，documentation 也已經寫好了，詳情請見下方的 Github Repo 連結。<br>那個 NEW! 是想起來有這麼一個可以拿來 DEMO 的網站存在，所以就加上去了。</p>          </div><ul><li><p><a href="https://phantom0174.github.io/canvas-nice.js/">預覽網站</a></p><blockquote><p>目前設定是 500 個點</p></blockquote></li><li><p><a href="https://codepen.io/phantom0174/pen/OJoXWmJ">NEW! 可即時渲染自訂參數的預覽網站</a></p></li><li><p><a href="https://github.com/phantom0174/canvas-nice.js">Github Repo</a></p><blockquote><p>之後會寫 documentation，但直接看 <code>main.js</code> &amp; <code>index.html</code> 中的東西或許還比較快 owo</p></blockquote></li></ul><h2 id="後記">後記</h2><div class="note note-warning">            <p>正式版的程式碼打包之後的大小是 <code>8.65 KiB</code>，總算是小一點了 owo。</p>          </div><p>最後寫下來程式碼打包時的大小是 <code>10.52 KiB</code>，比 <code>canvas-nest.js</code> 大了不少；但效能明顯提升就是爽 \^~^/。</p><p>筆者寫這段文時已經把主程式寫好了，前前後後找資料寫程式碼大概花了 24 小時左右，終於可以放鬆啦（灑花！</p><p>不過之後某時候想到一些東西如果可以優化的話會再繼續優化程式。</p><p>那就先醬 OwO ~</p><!--lp:skip-some-->]]></content>
    
    
    
    <tags>
      
      <tag>mafs</tag>
      
      <tag>program</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Blog 設定公開</title>
    <link href="/2023/02/blog-config-reveal/"/>
    <url>/2023/02/blog-config-reveal/</url>
    
    <content type="html"><![CDATA[<!--lp:skip-all--><h2 id="前言">前言</h2><p>筆者開始用 hexo 作為部落格生成器之後，常常遇到想要但沒有的功能；也找不到類似的 plugins，所以只能自己來弄。筆者大多都在研究數學&amp;程式，所以做的修改大多都是有助於撰寫這方面的東西。</p><p>大部分功能的實現是依賴 hexo 本身的注入器與 fluid 主題的增強注入器<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[注入器 Documentation](https://fluid-dev.github.io/hexo-fluid-docs/advance/)">[1]</span></a></sup>。</p><h2 id="正文">正文</h2><h3 id="修改了什麼">修改了什麼</h3><p>以下為主要增強點：</p><ol><li><p>數學式渲染（KaTeX）</p><blockquote><p>必需的吧 OwO，沒有這個就甚麼都做不了惹。</p></blockquote></li><li><p>文章推薦（disqus recommendations）</p></li><li><p>動態背景</p><blockquote><p>舊用 canvas-nest.js，現已切換到筆者自己開發的優化版套件 canvas-noice.js<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="詳情請見[此文](https://phantom0174.github.io/2023/02/introduce-canvas-noice.js/)">[2]</span></a></sup>。</p></blockquote></li><li><p>自動生成 Table Of Contents</p><blockquote><p>筆者覺得 hexo fluid 本身的側欄 toc 不太好用</p></blockquote></li><li><p>客製化字體</p><blockquote><p>英文：PT Serif, 中文：Noto Serif TC, 程式語法：Fira Code</p></blockquote></li></ol><h3 id="其他東西">其他東西</h3><p>除了以上幾點外，筆者也弄了一些小動畫、調整了一些元素的大小、優化了一些文件的載入順序、設定了一些會影響 SEO 評分的東西。總而言之，就是要讓這個部落格好看一點 \^~^/。</p><h3 id="公開的地點">公開的地點</h3><p>請看 <a href="https://github.com/phantom0174/phantom0174.github.io">這個網頁的原始碼</a>。主要為 <code>./scripts/</code> 和 <code>./source/css/</code> 底下的東西。</p><h2 id="後記">後記</h2><p>網路上看很多人都有公開自己的 hexo blog 設定與客製化設定，想說等弄完基本修改之後就來公佈自己的。如果你也想要公開自己的設定（注意不要讓敏感資料外洩），可以參考這篇<a href="https://guiblogs.com/hexo30-23/">教學文章</a>。</p><p>希望這篇文章可以幫助到想要客製化自己部落格的人。</p><p>那就先醬。</p><hr><p>Photo by <a href="https://unsplash.com/@joshredd?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Josh Redd</a> on <a href="https://unsplash.com/photos/zBtM8P2OaeA?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a>.</p><h2 id="參考">參考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://fluid-dev.github.io/hexo-fluid-docs/advance/">注入器 Documentation</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>詳情請見<a href="https://phantom0174.github.io/2023/02/introduce-canvas-noice.js/">此文</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何理解拉格朗日乘子</title>
    <link href="/2023/02/how-to-understand-lagrange-multiplier/"/>
    <url>/2023/02/how-to-understand-lagrange-multiplier/</url>
    
    <content type="html"><![CDATA[<!--Remove "@" before use--><!--@lp:skip-all--><!--@lp:skip-some--><h2 id="前言">前言</h2><p>一開始是高二看到這個東西，但怎麼看都看不懂，只知道它是用在有限制條件下求極值的工具。</p><p>所以就變成時不時去看一下，一直到現在學了向量微積分後才懂這個名字看起來酷酷的東西是在做甚麼 owo。</p><h2 id="正文">正文</h2><h3 id="二維情形">二維情形</h3><p>據筆者所知，拉格朗日乘子大多都是拿來解在邊界上的極值問題。而在 $xy$ 平面上區域的邊界 ($\partial\Omega$) 即是一條曲線。</p><p>所以解一個二元函數在 $xy$ 平面上區域的極值通常都是用 <strong>偏微都為0</strong> 解區域內極值，搭配上 <strong>拉格朗日乘子</strong> 解邊界上的極值。</p><p>不過先拉回來正題：拉格朗日乘子在二維，單限制條件下的聯立方程式可以被表達為</p><p>$$\begin{cases}\nabla f = \lambda \nabla g\\g=0\end{cases}$$</p><p>以下是理解這個奇怪東西的過程：</p><p>現在有一個要求極值的二元函數 $f(x,y)$ 在 $\mathbb{R}^3$ 中，可以把它想像成要爬的山。</p><p>而現在有另一個限制條件 $g(x, y) = 0$，也就是一條曲線，可以把它想像成爬山的路徑。</p><p>現在想像你在沿著這條路徑爬這座山。平常爬山時如果位在於非極值高度的時候會明顯感覺到自己在下降或是上升。</p><p>但是如果爬到一個區域極值高點時，會明顯感覺到自己上升的幅度在減小，最後變成 $0$，再變成下降的幅度越來越多。<br>下降到最低點時的情況剛好相反。</p><p>但我們要如何用數學來描述剛好在最高點 or 最低點的那個時刻？</p><p>在此，我們先引進先前的方程式<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://phantom0174.github.io/2023/02/how-to-understand-gradient/#二維">[1]</span></a></sup>：</p><p>$$df = \nabla f \cdot d\mathbf{r}$$</p><p>我們從這條恆等式已經知道：如果是在等位面上的曲線走（朝著 $d\mathbf{r}$ 的方向走），$df$，也就是爬升的高度，會是 $0$。</p><p>所以我們在最高點時不會感覺到上升或下降，就是因為我們的路徑剛好跟某條等位面上的曲線相切。</p><p>而如果相切，就代表我們這條路徑（$g(x,y)$）的梯度會剛好與這座山（$f(x,y)$）的梯度平行，這個現象可以被描述為：</p><p>$$\nabla f = \lambda \nabla g$$</p><p>也就是一開始聯立方程式中的第一條。</p><p>如果弄不太懂，非常推薦可以去網路上查一堆視覺化的圖，對理解過程非常有幫助。</p><p>而那條聯立方程式，也可以被寫成</p><p>$$\begin{cases}f_x = \lambda g_x\\f_y = \lambda g_y\\g=0\end{cases}$$</p><h3 id="三維情形">三維情形</h3><h4 id="單限制函數">單限制函數</h4><p>我們類比二維的情況，套用相同的概念：極值發生在 <strong>目標函數</strong> 與 <strong>限制函數</strong> 的梯度向量平行之時。</p><p>只是在三維時，我們已經沒辦法將諸如 $f = x^2-xy+z$ 這種要求極值的函數視覺化了，因為那會需要四維空間。但因為 $\nabla f$ 是一個三維向量場，所以我們仍然可以想像一下。</p><p>現在想像在 $\mathbb{R}^3$ 中有由限制函數 $g(x,y,z) = k$ 所描繪出來的一個（二維）曲面，取名為 $\mathcal{M}$。另外，空間中也充滿了 $f$ 的梯度向量場。</p><p>接下來，為了節省腦力，我們將 $\nabla f$ 要渲染出的範圍用 $\mathcal{M}$ 限制住。也就是只渲染以 $\mathcal{M}$ 上點為起點的 $\nabla f$。等價於想像以下這個 $S$。</p><p>$$\forall p \in \mathcal{M},\ S = \left\{\nabla f (p) \right\}$$</p><p>這時候，$\mathcal{M}$ 上的 $\nabla f$ 向量可能會在某一點跟 $\mathcal{M}$ 垂直，而那就是極值發生之時。</p><h4 id="兩限制函數">兩限制函數</h4><p>現在假設我們有兩個限制函數：</p><p>$$g_1(x,y,z) = k_1 \\g_2(x,y,z) = k_2$$</p><p>同樣地，我們將 $g_1$ 所描繪出的曲面取名為 $\mathcal{M}_1$；$g_2$ 的取名為 $\mathcal{M}_2$。</p><p>類比上面所想像的情況，因為兩曲面在空間中相交的結果是一條曲線（如下圖），所以這次我們要以它為主角，把 $\nabla f$ 渲染在這條曲線上就好。</p><p><img src="p1.webp" alt="兩曲面的交線"></p><p><img src="p2.webp" alt="分佈在 C 上的 del f"></p><blockquote><p>因為不敢直接拿原文書中圖片的所以就自己畫了 owo</p></blockquote><p>極值發生之處即是當某一點的 $\nabla f$ 會與曲線垂直之時。但要如何用數學描述這個情況？</p><p>如果要描述 $\nabla f$ 在某點會與曲線垂直，那我們就要先描述出與曲線在那一點垂直的面。要描述這個面，我們可以用 $\nabla g_1$ 與 $\nabla g_2$ 在那點的兩個向量作為基底，並用它們做線性展開，成為我們要描述的面。</p><p><img src="p3.webp" alt="用兩基底展開的面（微觀圖）"></p><p>而 $\nabla f$ 只要與曲線垂直，就會落在這個面上。這個現象用數學描述為：</p><p>$$\nabla f = \lambda \nabla g_1 + \mu \nabla g_2$$</p><p>也就是 $\nabla f$ 可以被描述為兩個向量的線性組合。</p><p>將這個式子與限制條件聯立起來，就成為了拉格朗日乘子在 $\mathbb{R}^3$ 中且有兩限制函數的聯立方程了。</p><blockquote><p>因為美觀，把 $k_1$ 與 $k_2$ 移到左邊，成為 $g_1’$ 與 $g_2’$。</p></blockquote><p>$$\begin{cases}\nabla f = \lambda \nabla g_1' + \mu \nabla g_2'\\g_1' = 0\\g_2' = 0\end{cases}$$</p><h2 id="後記">後記</h2><p>雖然本文中只有提到 <strong>三維，兩限制條件</strong> 以下的情況，但拉格朗日乘子卻是在任意維度任意數量的限制條件下都可以用。</p><p>筆者自己也暫時沒辦法理解更高維度的情況。肯定是要等學了一些高等微積分或是更深入的東西之後，才會理解這個酷酷東西到底在做甚麼 OwO。</p><p>先醬。</p><hr><h2 id="參考">參考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://phantom0174.github.io/2023/02/how-to-understand-gradient/#%E4%BA%8C%E7%B6%AD">https://phantom0174.github.io/2023/02/how-to-understand-gradient/#二維</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>mafs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何理解梯度與其性質</title>
    <link href="/2023/02/how-to-understand-gradient/"/>
    <url>/2023/02/how-to-understand-gradient/</url>
    
    <content type="html"><![CDATA[<!--Remove "@" before use--><!--@lp:skip-all--><!--@lp:skip-some--><h2 id="前言">前言</h2><p>筆者學梯度時實質是經歷了一場苦痛，前前後後從高中看到前幾個月終於看懂了 \^~^/。</p><p>所以在這邊紀錄一下筆者自己的理解過程。</p><h2 id="正文">正文</h2><p>在之前學習的過程中，總是看到以下三個性質反覆出現：</p><ol><li>梯度算子將一個純量場映到一個向量場</li><li>梯度向量指向的方向即為原本純量場增長最快的方向</li><li>梯度向量會與曲線/面垂直</li></ol><p>第一個可以理解，但從第二個性質開始就完全不知道是怎麼推導出來的，苦戰了許久。</p><p>在終於弄懂過程的現在，筆者終於可以寫下自己完整的理解過程。</p><h2 id="知識點理解">知識點理解</h2><p>劇透一下，第二性質是由一條公式加以推導而來。在理解這條公式之前，要先介紹三個環環相扣的知識點：</p><ol><li>多元函數的鏈鎖律</li><li>全微分</li><li>方向導數</li></ol><h3 id="多元函數的鏈鎖律">多元函數的鏈鎖律</h3><p>我們在大一下之前碰到的大多都是單元函數的鏈鎖律：</p><p>$$\frac{df(u)}{dt} = \frac{df(u)}{du}\cdot\frac{du}{dt} \tag{1}$$</p><p>而我們也可將鏈鎖律推廣到更一般的狀況下，也就是針對多元函數的狀況。但在推廣的過程中，我們需要一種我稱之為 <strong>依賴圖（Dependency Graph）</strong> 的東西來幫助我們理解並計算鏈鎖律。</p><p>所謂 <strong>依賴圖</strong>，描述了跟函數相關的變數們之間的關係。如同 $\text{(1)}$，我們可以畫出這個函數的依賴圖：</p><p><img src="p2.webp" alt="(1) 的依賴圖"></p><p>這張圖的意思是：$f$ 與兩個變數 $u, t$ 有關；其中 $u$ 是中間變數，$t$ 是底層變數。</p><p>要得到 $\frac{df}{dt}$，就如同把通往 $t$ 的路徑走過一般，要把 $\frac{\partial f}{\partial u}$ 乘上 $\frac{\partial u}{\partial t}$。</p><p>現在以多元變數為例子：如果以下為 $f$ 的依賴圖，要如何求 $\frac{df}{dt}$？</p><p><img src="p3.webp" alt="f 的依賴圖"></p><p>其中 $x, y$ 是中間變數；$t$ 是底層變數。對於這個例子，要把不同路徑所得出來的結果相加在一起，也就是：</p><p>$$\begin{align*}\frac{df}{dt} &= \frac{\partial f}{\partial x}\frac{dx}{dt} +    \frac{\partial f}{\partial y}\frac{dy}{dt}\\&= f_x x_t + f_y y_t\end{align*}$$</p><blockquote><p>為了節省<del>筆者打 LaTeX 語法的</del>時間，筆者決定在接下來的文章中都引進偏微分的簡寫 owo</p></blockquote><p>另一個例子，是求以下這個函數的 $f_x$：</p><p><img src="p5.webp" alt="另一個 f 的依賴圖"></p><p>其中的 $K_{3,3}$ 是引進圖論中的<strong>完全二分圖</strong>做為簡寫標示，代表每個左邊的變數都會跟右邊的三個變數相關。這題的結果即是：</p><p>$$f_x = f_u u_x + f_v v_x + f_w w_x$$</p><p>因為只要求對底層 $x$ 的偏微，所以只要把所有以 $x$ 作為終點的路徑結果相加即可。</p><p>鏈鎖律的部分就暫時到這邊，接下來是 <strong>全微分</strong> 的部分。</p><h3 id="全微分">全微分</h3><p>相較於普通的偏微分，即只關心在單一變數改變下所引起的函數值變化率，全微分同時考慮了在所有變數都有微小變化下所引起的函數改變量。</p><p>對於一個二元函數 $f(x,y)$ 來說：</p><p>$$df = f_x\ dx + f_y\ dy$$</p><p>以下的圖給出了蠻好的直覺性解釋：</p><p><img src="p9.webp" alt="微觀尺度下看到的東西"></p><p>因為大部分（不是奇形怪狀）的函數在拉<strong>非常，非常，非常近</strong>之後都是呈線性變化，所以把 $f$ 拉近之後就可以看到這張圖。</p><p>依樣畫葫蘆，我們也可以推論出對於 $u(x,y,z)$：</p><p>$$du = u_x\ dx + u_y\ dy + u_z\ dz$$</p><p>好像沒有甚麼東西要說了，那就讓我們進入 <strong>方向導數</strong> 吧。</p><h3 id="方向導數">方向導數</h3><p>所謂 $f_x$，即是只觀察 $f$ 在 $x$ 方向的變化率；同樣地，$f_y$ 也是只觀察 $f$ 在 $y$ 方向的變化率。</p><p>但是 $\mathbb{R}^2$ 可不只有這兩種方向。以不同方向看 $f$ 的變化率，得出來的數值也會不同，這即是 <strong>方向導數</strong>。</p><p>以下這張圖給出了初始點 $p_0$，以及單位方向向量 $\mathbf{u} = (cos\theta, sin\theta)$ 作為我們要計算方向導數的方向。其中 $s$ 是弧長變數。他們三個結合起來即是跟弧長相關的位置向量 $\mathbf{r}(s)$。</p><p><img src="p7.webp" alt="變數們"></p><p>寫一下各自的的定義</p><p>$$f(x,y) \in \mathbb{R}^3,\\\mathbf{u} = \left(cos\theta, sin\theta \right) \in \mathbb{R}^2\\\mathbf{r}(s) = p_0 + s\cdot \mathbf{u},\ p_0 \in \mathbb{R}^2$$</p><p>同時利用這些變數，引進方向導數的定義</p><p>$$D_{\mathbf{u}} f = \frac{df}{ds} = \lim_{s\to 0} \frac{f\left(p_0+s\mathbf{u}\right) - f(p_o)}{s}$$</p><p>這條式子適合用在奇形怪狀的函數身上，就跟像要用微分的定義去計算一些奇形怪狀函數的狀況是一樣的道理。但它卻對我們日常計算上不太友善，所以還要再加以推導。</p><p>利用我們剛剛所學的全微分，我們可以知道 $df = f_x\ dx + f_y\ dy$，同除以 $ds$ 即可得到化簡過一些的結果：</p><p>$$\begin{align*}\frac{df}{ds} &= f_x\ \frac{dx}{ds} + f_y\ \frac{dy}{ds}\\&= \left(f_x, f_y\right)\cdot \left(\frac{dx}{ds},\frac{dy}{ds}\right)\end{align*}$$</p><p>左邊那一項是我們今天的壓軸 - <strong>梯度</strong>；而右邊那一項即是 $\frac{d\mathbf{r}}{ds}$。所以可以進一步化簡成：</p><p>$$\begin{align*}D_{\mathbf{u}}f = \nabla f \cdot \frac{d\mathbf{r}}{ds}\end{align*}$$</p><p>此時，我們引入 $\mathbf{r}$ 的定義加以化簡</p><p>$$\begin{align*}\mathbf{r}(s) &= p_0 + s\cdot \mathbf{u}\\\Rightarrow \frac{d\mathbf{r}}{ds} &= \mathbf{u}\end{align*}$$</p><p>最終，結果即如下</p><p>$$D_{\mathbf{u}}f = \nabla f \cdot \frac{d \mathbf{r}}{ds} = \nabla f \cdot \mathbf{u} \tag{2}$$</p><p>這條式子牽扯到的只有奇怪的運算子（梯度）、方向向量，還有向量的內積，經過運算即可算出方向導數，在計算上來說相較於從定義開始算簡單了不少。用這條式子，我們準備好推導出第二性質了！</p><h2 id="第二性質">第二性質</h2><p>由上面那條式子 (2) 可知，方向導數的值即是所謂 <strong>f 的梯度</strong> 與單位方向向量的內積。</p><p>兩個向量內積最大值，發生在兩向量平行且同向的時候。也就是，沿著跟 <strong>f 的梯度</strong> 相同的方向的方向導數會有最大值。</p><p>而這也就是第二點性質的結論 - <strong>梯度向量指向的方向即為原本純量場增長最快的方向</strong></p><h2 id="第三性質">第三性質</h2><h3 id="二維">二維</h3><p>第三性值同樣也是從一條式子的結果而來，而那條式子也跟我們在第二性質中用的很像。</p><p>假設 $\mathbf{r}$ 是一個在 $f(x,y) = k$ 這條曲線上的位置向量。</p><p>用全微分，可以導出以下式子：</p><p>$$\begin{align*}df &= \frac{\partial f}{\partial x}dx + \frac{\partial f}{\partial y}dy \\&= \nabla f \cdot d\mathbf{r}\end{align*}$$</p><p>因為這條曲線實質上是 $f(x,y)$ 在 $\mathbb{R}^3$ 中用 $z=k$ 這個平面（等位面）所截出來的曲線。</p><p>而在三維空間中，這個函數的 $df = 0$（因為曲線在等位面上遊走，故 $z$ 方向沒有任何變動量）。</p><p>所以可以得到：</p><p>$$0 = \nabla f \cdot d\mathbf{r}$$</p><p>$d\mathbf{r}$ 即是切向量。而兩個向量內積為 $0$ 的條件即是它們兩個必須要垂直，而跟切向量垂直的即是法向量 (normal vector)，所以 <strong>f 的梯度向量</strong> 就是這條曲線的法向量。</p><p>而這也是第三性質的結論 - <strong>梯度向量會與曲線垂直</strong>。</p><h3 id="三維">三維</h3><p>三維起初就有點難理解，因為之前的數學中極少碰到 $f(x,y,z) = k$ 這種類型的曲面；如果從方程式解的角度來看，會更加難以想像。</p><p>跟二維一樣，這必須要從 <strong>四維</strong> 的角度來看。就如同 <strong>二維空間只是三維空間的一個切平面</strong>，我們也可以知道 <strong>三維空間只是四維空間的一個切空間</strong>。</p><p>所以這個曲面只是 $f(x,y,z)$ 在四維空間中被 $w=k$ 這個切空間（等位空間）所截出來的一個空間而已。</p><p>如果稍微變動 $k$ 值，也代表 $w=k$ 在四維空間中稍稍平移，也代表我們在三維空間所看到的曲面並不會有太多的 <strong>突變現象</strong>，也就是整體的變化是連續的。</p><blockquote><p>如果 $f$ 不是甚麼奇怪的方程式的話啦 owo</p></blockquote><p>同樣，我們可以推導出三維空間的方程式，$\mathbf{r}$ 是在這條曲面上的位置向量。</p><p>$$\begin{align*}df &= \frac{\partial f}{\partial x}dx + \frac{\partial f}{\partial y}dy + \frac{\partial f}{\partial z}dz\\&= \nabla f \cdot d\mathbf{r}\end{align*}$$</p><p>從上面的解說可知，$\mathbf{r}$ 是在切空間上游走，所以在 $w$ 軸方向上並不會有任何的變動量。</p><p>所以 $df$ 同樣也是 $0$，可以得到相同的結論：</p><p>$$0 = \nabla f \cdot d\mathbf{r}$$</p><p>而這邊的 $d\mathbf{r}$ 即是曲面的切向量，所以 $\nabla f$ 即是曲面的法向量。</p><p>這也是第三性值在三維空間中的呈現結果 - <strong>梯度向量會與曲面垂直</strong>。</p><h2 id="後記">後記</h2><p>終於把一些圖與知識點說明補起來了。</p><p>耶 \^~^/。</p>]]></content>
    
    
    
    <tags>
      
      <tag>mafs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LaTeX 保護者</title>
    <link href="/2023/01/latex-protector/"/>
    <url>/2023/01/latex-protector/</url>
    
    <content type="html"><![CDATA[<!--lp:skip-all--><h2 id="前言">前言</h2><p>上篇內容，是有關於怎麼輕量型渲染 hexo-posts 中的 LaTeX (KaTeX) 語法。在某個段落中<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://phantom0174.github.io/2023/01/lightweight-hexo-latex-rendering/#實作過程">[1]</span></a></sup>，筆者放了一個簡易版的 <code>latex-protector.py</code> 程式碼，但這短短的程式碼顯然不具有任何語法檢查功能，跑起來效能也很差。</p><p>所以筆者用另一個邏輯重新寫了 <code>latex-protector</code> 並將其打包起來，相比舊程式有著以下 <strong>4 大特點</strong>：</p><ol><li>支持語法檢查</li><li>可插入 <strong>忽略部分區塊</strong> 或 <strong>忽略全部內容</strong> 的語法</li><li>過程快速</li><li>輸出美化</li></ol><h2 id="所以說那個程式碼呢">所以說那個程式碼呢</h2><p>請見 Github:<br><a href="https://github.com/phantom0174/latex-protector">https://github.com/phantom0174/latex-protector</a></p><h2 id="實作">實作</h2><h3 id="名詞定義">名詞定義</h3><p>先提一下奇怪的名詞</p><blockquote><p>p.s. 因為 characteristics 太長了，縮寫又會變成 <code>char</code>，所以乾脆把數學中的 <code>eigen</code> 前綴借來用 owo。</p></blockquote><ul><li><code>$$</code> 稱為 特徵字串（eigenstring）</li><li>特徵區塊（eigenblock）是由一個前導 <code>$$</code> 與後導 <code>$$</code> 封閉起來的區塊，兩兩為一對，稱為 特徵對（eigenpair）。</li></ul><h3 id="流程">流程</h3><p>整體分為5大部分，括弧中為在程式碼中用的代號。</p><ol><li><p>特徵化（<code>eigenize</code>）<br>將 md 檔案內容讀入，並將每一行中有多少 eigenstring 記錄下來；同時將 <strong>忽略語法</strong> 編碼為 <code>-1</code>。<br>此過程得到的東西稱為特徵資訊（<code>eigeninfo</code>）</p></li><li><p>忽略自訂區塊（<code>ignore_eigeninfo</code>）<br>將使用者以 <strong>忽略語法</strong> 包起來的區塊從 eigeninfo 中移除。<br>同時檢查忽略語法有沒有成雙成對。</p></li><li><p>檢查特徵語法（<code>check_eigen_info</code>）<br>特徵語法有可能會出錯，像是：</p><ol><li>同行中出現超過兩個 eigenstring</li><li>檔案中 eigenstring 的數目為奇數，也就是至少有一個 eigenpair 出問題了。</li></ol></li><li><p>檢查特徵區塊（<code>check_eigen_block</code>）<br>檢查一個 eigenpair 中間是否有被 <strong>單行eigenpair</strong>（一行中有兩個 eigenstring）擋住。</p></li><li><p>取得插入位置與標記（<code>get_insertion_cmd</code>）<br>從 eigeninfo 中最後決定要在哪裡插入 <code>&lt;p&gt;</code>；哪裡插入 <code>&lt;/p&gt;</code>，並將行數與要插入的字串回傳。</p></li></ol><h2 id="後記">後記</h2><p>總之用起來就是又快又開心 \^~^/。</p><p>然後因為筆者程式超爛，所以有出 bug 的話請直接發 issues，有時間的話會來修。</p><hr><p>Photo by <a href="https://unsplash.com/@markuswinkler?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Markus Winkler</a> on <a href="https://unsplash.com/photos/3LVhSjCXRKc?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a>.</p><h2 id="參考">參考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://phantom0174.github.io/2023/01/lightweight-hexo-latex-rendering/#%E5%AF%A6%E4%BD%9C%E9%81%8E%E7%A8%8B">https://phantom0174.github.io/2023/01/lightweight-hexo-latex-rendering/#實作過程</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>mafs</tag>
      
      <tag>program</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>放點新奇的數學東西</title>
    <link href="/2023/01/mafs-mixture/"/>
    <url>/2023/01/mafs-mixture/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>因為這個 blog 實在太空了，所以放一些自己碰過的一些 <strong>數學大雜燴</strong>。</p><h2 id="正文">正文</h2><h4 id="羅密歐與茱麗葉微分方程">羅密歐與茱麗葉微分方程</h4><p>$$\begin{bmatrix}\dot{R} \\ \dot{J}\end{bmatrix}=\textbf{M}\begin{bmatrix}R \\ J\end{bmatrix} $$</p><h4 id="牛頓冷卻定律">牛頓冷卻定律</h4><p>$$\frac{dT}{dt}=-k\left(T-E(t)\right)$$</p><h4 id="費馬小定理">費馬小定理</h4><p>$$a^{p-1}\equiv 1 \pmod p$$</p><h4 id="歐拉定理">歐拉定理</h4><p>$$a^{\varphi(n)}\equiv 1 \pmod n,\ \gcd(a,n)=1$$</p><h4 id="未命名-M5">未命名 M5</h4><p>$$F\left(x\right)=\left(m\left(x\right)-\frac{1}{x}\int_{0}^{x}m\left(u\right)du\right)$$</p><p>$$M_{5}\left(x\right) = \int_{0}^{x}m\left(n\right)\cdot\left(1+F\left(n\right)\cdot sgn\left(m\left(n\right)\right)^{sgn\left(n\right)}\right)e^{\frac{l}{2}\left(x^{2}-n^{2}\right)}dn$$</p><h4 id="花瓣">花瓣</h4><p>$$\left( x^2 + y^2 \right)^{\frac{n+1}{2}} = \sum_{k=0}^{\left \lfloor \frac{n}{2}\right \rfloor} \binom{n}{2k}\ (-1)^k\ x^{n-2k}\ y^{2k}$$</p><h4 id="奇怪積分">奇怪積分</h4><p>$$\int_0^{x}u^udu=\sum_{n=0}^{\infty}\left(\frac{x^{n+1}}{n+1}\left(\sum_{m=0}^{n}\left(\frac{-1}{n+1}\right)^{n-m}\frac{\ln(x)^m}{m!}\right)\right)$$</p><p>$$\int_0^x(u\ln(u))^cdu=\frac{x^{c+1}}{c+1}\left(\sum_{n=0}^{c}\left(\frac{-1}{c+1}\right)^{c-n}\frac{c!}{n!}\ln(x)^n\right)$$</p><h4 id="優秀的符號混用">優秀的符號混用</h4><p>$$\int ddd=\frac{d^2}{2}+C$$</p><h4 id="Gamma-雜燴">Gamma 雜燴</h4><p>$$\Gamma(z)=\int_0^\infty x^{z-1}e^{-x}dx$$</p><p>$$\Gamma(z)=(z-1)!$$</p><p>$$\int_{0}^{\infty}e^{-x^t}dx=\Gamma\left(\frac{1}{t}+1\right)$$</p><h4 id="Laurent-Series">Laurent Series</h4><p>$$f(z)=\sum_{n=-\infty}^\infty a_n(z-c)^n$$</p><h4 id="留數定理">留數定理</h4><p>$$\oint_\gamma f(z)\, dz = 2\pi i \sum_{f_a} \operatorname{Res}(f, a_k)$$</p><h4 id="超難積分雜燴">超難積分雜燴</h4><p>$$\int \frac{dx}{x^n+1}=\frac{-1}{n}\sum_{\omega^n+1=0}\omega\ln(x-\omega)+C$$</p><p>$$\int\frac{dx}{x^{\frac{q}{p}}+1}=p\int \textbf{Q}\left[\frac{u^{p-1}}{u^q+1}\right]\left(x^{\frac{1}{p}}\right)dx-\frac{p}{q}\sum_{\omega^q+1=0}\omega^{p}\ln\left(x^{\frac{1}{p}}-\omega\right)+C$$</p><h4 id="複數線積分雜燴">複數線積分雜燴</h4><p>$$\int_0^\infty \frac{\sin(x)}{x}dx = \frac{\pi}{2}$$</p><p>$$\int_0^\infty \frac{dx}{x^n+1} = \frac{\pi}{n\cdot \sin\left(\frac{\pi}{n}\right)}$$</p><p>$$\int_0^\infty \sin\left(x^n\right)dx = \frac{1}{n}\sin\left(\frac{\pi}{2n}\right)\Gamma\left(\frac{1}{n}\right)$$</p><p>$$\int_0^\infty \frac{\sin\left(x^n\right)}{x}dx = \frac{\pi}{ 2|n| },\ n\neq 0$$</p><h4 id="單擺">單擺</h4><p>$$T=4\sqrt{\frac{L}{g}}K\left(\frac{\theta_0}{2}\right),\ K(x)=\int_0^{\frac{\pi}{2}}\frac{d\theta}{\sqrt{1-x^2\sin^2(\theta)}}$$</p><h4 id="相撞">相撞</h4><p>$$t_{collision}=\frac{1}{\sqrt{2G(M+m)}}\left(\sqrt{r_ir_f(r_i-r_f)}+\sqrt{r_i^3}\cos^{-1}\left(\sqrt{\frac{r_f}{r_i}}\right)\right)$$</p><h4 id="神奇數學大雜燴">神奇數學大雜燴</h4><p>$$D^{z}x^n=\frac{\Gamma(n+1)}{\Gamma(n-z+1)}x^{n-z}$$</p><p>$$D^{z}e^{nx}=n^{z}e^{nx}$$</p><p>$$D^{z}\cos(n\theta)=n^z\cos\left(n\theta+\frac{\pi}{2}z\right)$$</p><p>$$e^{D^z}(e^{nx})=e^{n^z+nx}$$</p><p>$$e^D(x^n)=(x+1)^n$$</p><p>$$sin(D)e^{nx}=e^{nx}\sin(n)$$</p><p>$$\sin(D)\sin(\theta)=\cos(x)\sinh(1)$$</p><p>$$\sin(D)\ln(x) = \begin{cases}\tan^{-1}\left(\frac{1}{x}\right)    & \text{ if } x \geq 1 \\\infty    & \text{ if } 0 \lt x \lt 1\end{cases}$$</p><p>$$\ln(D)e^{nx}=2\ln(n)e^{nx},\ n>0$$</p><p>$$\ln(D)\sin(x)=\pi\cos(x)$$</p><p>$$\frac{f(x)}{(D-a)^m}=e^{-ax}\int^{(m)}f(x)e^{ax}dx^{(m)}$$</p><p>$$\int_{0}^\infty \frac{f\left(x^n\right)}{x}dx= \frac{1}{ |n| } \int_{0}^\infty \frac{f(t)}{t}dt,\ n\neq 0$$</p><h2 id="後記">後記</h2><p>推薦在無聊時可以去看看這些東西：</p><ul><li><p>介紹影片</p><ul><li><a href="https://www.youtube.com/watch?v=kq4jbNl4lJk">Inter-universal Teichmüller theory via Fumiharu Kato w/English subtitles [PROPER]</a></li></ul></li><li><p>論文連結</p><ol><li><a href="http://www.kurims.kyoto-u.ac.jp/~motizuki/Inter-universal%20Teichmuller%20Theory%20I.pdf">Part I</a></li><li><a href="http://www.kurims.kyoto-u.ac.jp/preprint/file/RIMS1757.pdf">Part II</a></li><li><a href="http://www.kurims.kyoto-u.ac.jp/preprint/file/RIMS1758.pdf">Part III</a></li><li><a href="http://www.kurims.kyoto-u.ac.jp/preprint/file/RIMS1759.pdf">Part IV</a></li></ol></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>mafs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HEXO 輕量級 LaTeX 渲染</title>
    <link href="/2023/01/lightweight-hexo-latex-rendering/"/>
    <url>/2023/01/lightweight-hexo-latex-rendering/</url>
    
    <content type="html"><![CDATA[<!--lp:skip-all--><h2 id="前言">前言</h2><p>本文適用於正在使用 <code>@traptitech/markdown-it-katex</code> 套件進行 HEXO 文章中 LaTeX 語法渲染，且與筆者一樣，都有強迫症的人。</p><h2 id="正文">正文</h2><p>不知道你是否曾經為 HEXO 所生成出的厚重檔案所苦？<br>尤其是當原始 md 檔裡面有許多 LaTeX 語法時，生成出來的東西就會像這樣：</p><p><img src="0.png" alt=""></p><blockquote><p>os: 亂糟糟 超級多密密麻麻的東西看了就不舒服qq</p></blockquote><p>就如上圖的情況，原本 15KB 的 md 檔，經過 <code>hexo g</code> 魔法後，整整膨脹了 <strong>37.87倍</strong>，來到了 <strong>568KB</strong>。<br>考量到 Github Pages 只有最多1GB的空間，筆者決定要解決這個亂象。</p><h3 id="找資料，卡住">找資料，卡住</h3><p>找了許久，最有印象的是這篇教學文章<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="http://lowrank.science/Hexo-KaTeX/">[1]</span></a></sup>，簡單整理下它的重點：</p><ol><li>移除 <code>@traptitech/markdown-it-katex</code></li><li>使用 KaTeX 官網附贈的 Auto-render Extension<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://katex.org/docs/autorender.html">[2]</span></a></sup></li><li>卡住，遇到問題</li></ol><p>為什麼會遇到問題？因為在 <code>md -&gt; html</code> 的過程中，會進行字元跳脫等轉譯動作（筆者對這方面正確用詞不是太熟悉，還請見諒）。<br>也就是把 <code>&amp;</code> 轉成 <code>&amp;amp</code>；把 <code>_哈哈_</code> 轉成 <code>&lt;em&gt;哈哈&lt;/em&gt;</code>；諸如此類。<br>但這就出問題了，因為我們在 md 檔中所寫的 LaTeX 語法，也會有一樣的命運。</p><p>首先第一個問題，就是在過程中，會把換行變成 <code>&lt;br&gt;</code>。<br>如果有一行 LaTeX 語法長這樣：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br>A<span class="hljs-built_in">_</span>i+B<span class="hljs-built_in">_</span>j=C<span class="hljs-built_in">_</span>k<br><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p>它最後會渲染錯誤，因為轉換過程中會把換行字元 <code>\n</code> 換成 <code>&lt;br&gt;</code>，而這會把 <code>$$</code> 與接下來的語法分離，Auto-render Extension 自然也無法辨識這是一個由 <code>$$</code> 作為開頭的LaTeX語法了。</p><p>這個問題解決方法還算簡單，只要把所有東西都寫在同一行上就結束，只是略略減少了可讀性。<br>但問題是出在於第二個問題 <strong>很煩</strong>。</p><p>第二個問題，以筆者的經驗為例。有一個 LaTeX 語法：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><span class="hljs-keyword">\frac</span>&#123;f&#125;&#123;g&#125; = <span class="hljs-keyword">\sum</span><span class="hljs-built_in">_</span>&#123;<span class="hljs-keyword">\omega</span><span class="hljs-keyword">\in</span> <span class="hljs-keyword">\mathbb</span>&#123;Z&#125;<span class="hljs-built_in">_</span>g&#125;<span class="hljs-keyword">\left</span>(<span class="hljs-keyword">\frac</span>&#123;f(u)&#125;&#123;g&#x27;(u)&#125;<span class="hljs-keyword">\Big</span>|<span class="hljs-built_in">_</span>&#123;u=<span class="hljs-keyword">\omega</span>&#125;<span class="hljs-keyword">\cdot</span><span class="hljs-keyword">\frac</span>&#123;1&#125;&#123;x-<span class="hljs-keyword">\omega</span>&#125;<span class="hljs-keyword">\right</span>)<span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p>結果在渲染出來時，它變成了：</p><p><img src="1.png" alt="錯誤的渲染結果"></p><p>仔細即可看出原因：它把原始語法中的 <code>_g&#125;\left(\frac&#123;f(u)&#125;&#123;g'(u)&#125;\Big|_</code> 的左右兩個 <code>_</code> 看成 md 語法中的 <strong>強調文字</strong> 了。<br>解決方式跟跳脫字元方式一樣：把 <strong>每個</strong> <code>_</code> 前面都多加上 <code>\</code>，變成 <code>_</code> 的跳脫字元。<br>而換行 <code>\\</code> 也有同樣的問題，變成要打 <strong>四個</strong> 反斜線 <code>\\\\</code>。</p><p>但第二個問題的解決方式，顯然嚴重影響了我們在打語法過程中的順暢度，之後如果要修改也相當麻煩，因此必須要找更好的解決方式。</p><h3 id="好像可以解決？">好像可以解決？</h3><p>但要怎麼不讓我們在 md 檔中寫的 LaTeX 語法與普通的 md 語法做出區別呢？<br>筆者在埋頭找尋解決方式的過程中，偶然看到了在 <code>hexo-renderer-markdown-it</code> 套件<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://github.com/hexojs/hexo-renderer-markdown-it">[3]</span></a></sup>在說明文件上所寫的一段話：</p><p><img src="2.png" alt="說明文件的一部分"></p><blockquote><p>Render options<br>html<br>The html setting defines whether or not HTML content inside the document should be escaped or passed to the final result.</p></blockquote><p>這如同一線生機：如果我們把這個 option 打開，並利用 <code>&lt;p&gt;...&lt;/p&gt;</code> 把我們在 md 中的 LaTeX 語法包起來，那麼語法就不會受到侵害了。<br>因此，實作過程如下（包括導入 Auto-render Extension）</p><h3 id="實作過程">實作過程</h3><ol><li><p>新增 css 與 Auto-render Extension</p><ol><li>使用 <strong>HEXO注入器</strong><sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://fluid-dev.github.io/hexo-fluid-docs/advance/#hexo-注入代码">[4]</span></a></sup>，在專案的根目錄（<code>root/</code>）新增一個名為 <code>scripts</code> 的資料夾，並在其底下新增名為 <code>katex.js</code> 的檔案。</li></ol><p><img src="3.png" alt=""></p><ol start="2"><li>將以下程式碼貼入：</li></ol>     <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-1c029561" role="button" aria-expanded="false" aria-controls="collapse-1c029561">        <div class="fold-arrow">▶</div>Code      </div>      <div class='fold-content collapse' id="collapse-1c029561">        <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript">hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;head_end&#x27;</span>, <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;style&gt;</span><br><span class="hljs-string">        .katex&gt;.katex-html &#123;</span><br><span class="hljs-string">            white-space: nowrap;</span><br><span class="hljs-string">            overflow-x: scroll;</span><br><span class="hljs-string">            overflow-y: hidden;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &lt;/style&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.min.css&quot; integrity=&quot;sha384-vKruj+a13U8yHIkAyGgK1J3ArTLzrFGBbBc0tDp4ad/EyewESeXE/Iv67Aj8gKZ0&quot; crossorigin=&quot;anonymous&quot;&gt;</span><br><span class="hljs-string">    &lt;script defer src=&quot;https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.min.js&quot; integrity=&quot;sha384-PwRUT/YqbnEjkZO0zZxNqcxACrXe+j766U2amXcgMg5457rve2Y7I6ZJSm2A0mS4&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">    &lt;script defer src=&quot;https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/contrib/auto-render.min.js&quot; integrity=&quot;sha384-+VBxd3r6XgURycqtZ117nYw44OOcIax56Z4dCRWbxyPt0Koah1uHoK0o4+/RRE05&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">    &lt;script&gt;</span><br><span class="hljs-string">        document.addEventListener(&quot;DOMContentLoaded&quot;, function() &#123;</span><br><span class="hljs-string">            renderMathInElement(document.body, &#123;</span><br><span class="hljs-string">            // customised options</span><br><span class="hljs-string">            // • auto-render specific keys, e.g.:</span><br><span class="hljs-string">            delimiters: [</span><br><span class="hljs-string">                &#123;left: &#x27;$$&#x27;, right: &#x27;$$&#x27;, display: true&#125;,</span><br><span class="hljs-string">                &#123;left: &#x27;$&#x27;, right: &#x27;$&#x27;, display: false&#125;,</span><br><span class="hljs-string">                &#123;left: &#x27;\\(&#x27;, right: &#x27;\\)&#x27;, display: false&#125;,</span><br><span class="hljs-string">                &#123;left: &#x27;\\[&#x27;, right: &#x27;\\]&#x27;, display: true&#125;</span><br><span class="hljs-string">            ],</span><br><span class="hljs-string">            // • rendering keys, e.g.:</span><br><span class="hljs-string">            throwOnError : false</span><br><span class="hljs-string">            &#125;);</span><br><span class="hljs-string">        &#125;);</span><br><span class="hljs-string">    &lt;/script&gt;</span><br><span class="hljs-string">`</span>, <span class="hljs-string">&#x27;default&#x27;</span>);<br></code></pre></td></tr></table></figure>      </div>    </div><p>這個程式碼的意思是：在每一個 page 或是 post 所生成的 html 檔的 <code>&lt;head&gt;...&lt;/head&gt;</code> 中，加上<strong>兩個東西</strong>。</p><ul><li>其一，是起始的 css 部分。這是幫超出邊界的數學式加上滾輪視窗。</li></ul><p><img src="4.gif" alt=""></p><ul><li>其二，是 <code>Auto-render Extension</code> 的程式碼。</li></ul></li><li><p>移除舊套件與設定檔</p><ul><li><p>移除原先使用的 <code>@traptitech/markdown-it-katex</code> 套件，並確認有安裝 <code>hexo-renderer-markdown-it</code> 套件。</p></li><li><p>在 <code>config.yml</code> 中刪除 <code>@traptitech/markdown-it-katex</code> 的設定檔，否則會報錯。</p></li></ul> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">markdown:</span><br>  <span class="hljs-attr">plugins:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;@traptitech/markdown-it-katex&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>讓包在 <code>&lt;p&gt;...&lt;/p&gt;</code> 中的 latex 語法不要受侵蝕。<br>在 <code>config.yml</code> 中新增以下設定檔</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">markdown:</span><br>  <span class="hljs-attr">render:</span><br>    <span class="hljs-attr">html:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li><li><p>新增自動化程式，用 <code>&lt;p&gt;...&lt;/p&gt;</code> 保護所有 <code>.md</code> 檔中的 latex 語法。</p> <div class="note note-warning">            <p>底下程式是早期的版本，更好的程式請見 <strong><a href="https://phantom0174.github.io/2023/01/latex-protector/">此文章</a></strong>。</p>          </div><ol><li>在 <code>./source/</code> 底下新增名為 <code>latex_protector.py</code> 的檔案，並將以下程式碼複製貼上：</li></ol><p><img src="5.png" alt=""></p>     <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-5b5bd572" role="button" aria-expanded="false" aria-controls="collapse-5b5bd572">        <div class="fold-arrow">▶</div>太長了所以先折起來      </div>      <div class='fold-content collapse' id="collapse-5b5bd572">        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br><br><span class="hljs-comment"># must ends with &#x27;/&#x27;</span><br>ENTRIES_TO_PROTECT_UNDER_SOURCE_FOLDER = [<br>    <span class="hljs-string">&#x27;./about/&#x27;</span>,<br>    <span class="hljs-string">&#x27;./_posts/&#x27;</span><br>]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">protect_md_file</span>(<span class="hljs-params">file_path</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        content: <span class="hljs-built_in">list</span>[<span class="hljs-built_in">str</span>] = file.read().split(<span class="hljs-string">&#x27;\n&#x27;</span>)<br><br>    new = []<br><br>    status = <span class="hljs-string">&quot;i&quot;</span><br>    <span class="hljs-keyword">for</span> (i, line) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(content):<br>        <span class="hljs-keyword">if</span> status == <span class="hljs-string">&quot;i&quot;</span> <span class="hljs-keyword">and</span> line.startswith(<span class="hljs-string">&quot;$$&quot;</span>) <span class="hljs-keyword">and</span> line.endswith(<span class="hljs-string">&quot;$$&quot;</span>) <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(line) &gt; <span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> content[i-<span class="hljs-number">1</span>].startswith(<span class="hljs-string">&quot;&lt;p&gt;&quot;</span>):<br>                new.append(<span class="hljs-string">&quot;&lt;p&gt;&quot;</span>)<br>            <br>            new.append(line)<br>            <br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> content[i+<span class="hljs-number">1</span>].startswith(<span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>):<br>                new.append(<span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>)<br>            <br>        <span class="hljs-keyword">elif</span> status == <span class="hljs-string">&quot;i&quot;</span> <span class="hljs-keyword">and</span> line.startswith(<span class="hljs-string">&quot;$$&quot;</span>):<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> content[i-<span class="hljs-number">1</span>].startswith(<span class="hljs-string">&quot;&lt;p&gt;&quot;</span>):<br>                new.append(<span class="hljs-string">&quot;&lt;p&gt;&quot;</span>)<br>            <br>            new.append(line)<br>            status = <span class="hljs-string">&quot;e&quot;</span><br>        <br>        <span class="hljs-keyword">elif</span> status == <span class="hljs-string">&quot;e&quot;</span> <span class="hljs-keyword">and</span> line.endswith(<span class="hljs-string">&quot;$$&quot;</span>):<br>            new.append(line)<br>            <br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> content[i+<span class="hljs-number">1</span>].startswith(<span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>):<br>                new.append(<span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>)<br>            <br>            status = <span class="hljs-string">&#x27;i&#x27;</span><br>        <br>        <span class="hljs-keyword">else</span>:<br>            new.append(line)<br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        file.write(<span class="hljs-string">&#x27;\n&#x27;</span>.join(new))<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;[Protected] <span class="hljs-subst">&#123;file_path&#125;</span>&#x27;</span>)<br><br><br><span class="hljs-comment"># root_path ended with &#x27;/&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">traverse_folder</span>(<span class="hljs-params">root_path</span>):<br>    <span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> os.listdir(root_path):<br>        <span class="hljs-keyword">if</span> filename.endswith(<span class="hljs-string">&#x27;.md&#x27;</span>):<br>            protect_md_file(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;root_path&#125;</span><span class="hljs-subst">&#123;filename&#125;</span>&#x27;</span>)<br>        <span class="hljs-keyword">elif</span> filename.find(<span class="hljs-string">&#x27;.&#x27;</span>) == -<span class="hljs-number">1</span>:<br>            traverse_folder(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;root_path&#125;</span><span class="hljs-subst">&#123;filename&#125;</span>/&#x27;</span>)<br><br><br><span class="hljs-keyword">for</span> entry <span class="hljs-keyword">in</span> ENTRIES_TO_PROTECT_UNDER_SOURCE_FOLDER:<br>    traverse_folder(entry)<br></code></pre></td></tr></table></figure>      </div>    </div><ol start="2"><li><p>將 <code>ENTRIES_TO_PROTECT_UNDER_SOURCE_FOLDER</code> 中新增你想要保護的 <strong>資料夾根目錄</strong>（與 <code>_post</code> 同等級的）。</p><blockquote><p>筆者在 <code>./source/_posts/</code> 與 <code>./source/about/</code> 底下的 md 檔中都有用到 LaTeX 語法，因此是預設這兩個目錄。</p></blockquote></li><li><p>執行 <code>latex_protector.py</code>，程式會自行遞迴去找資料夾裡面所有的 md 檔，並回報保護訊息。</p></li></ol><ul><li>須知，這個程式碼只會識別將所有以 <code>$$...$$</code> 包起來的 LaTeX 區塊，如果 inline LaTeX (<code>$...$</code>) 在渲染上有些問題，請手動幫其加上 <code>&lt;p&gt;...&lt;/p&gt;</code>。</li></ul></li><li><p>使用 <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code> 進行預覽，沒問題的話即可deploy。</p><ul><li>之後每次 deploy 前都請記得執行 <code>latex_protector.py</code>。</li></ul></li><li><p>大功告成！</p></li></ol><h2 id="後記">後記</h2><p>在經過我們的 <del>調教</del> 修理後，原本15KB的檔案生成後只有 <strong>34KB</strong>。<br>相比原來結果，空間節省率高達 <strong>94%</strong>。<br>甚至還可以更進一步，在 <code>hexo-neat</code> 的壓縮之下，檔案大小來到了 <strong>29KB</strong>；空間節省率微增，來到了 <strong>94.9%</strong>。</p><p>如此一來，就可以寫更多的文章了（灑花\^~^/。</p><hr><p>p.s. 手一樣好酸owo</p><h2 id="參考">參考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="http://lowrank.science/Hexo-KaTeX/">http://lowrank.science/Hexo-KaTeX/</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://katex.org/docs/autorender.html">https://katex.org/docs/autorender.html</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://github.com/hexojs/hexo-renderer-markdown-it">https://github.com/hexojs/hexo-renderer-markdown-it</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://fluid-dev.github.io/hexo-fluid-docs/advance/#hexo-%E6%B3%A8%E5%85%A5%E4%BB%A3%E7%A0%81">https://fluid-dev.github.io/hexo-fluid-docs/advance/#hexo-注入代码</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>mafs</tag>
      
      <tag>program</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>關於我怎麼算出那個奇怪積分的</title>
    <link href="/2023/01/compute-that-strange-integral/"/>
    <url>/2023/01/compute-that-strange-integral/</url>
    
    <content type="html"><![CDATA[<h2 id="簡單版的積分（正整數）">簡單版的積分（正整數）</h2><h3 id="這個積分的由來">這個積分的由來</h3><p>學會積分的第一件事，就是試著解解看各式各樣的積分。<br>一開始看到這個問題時可能會想：這超簡單的啦！（$n\in\mathbb{Z}^+$）</p><p>$$\int \frac{dx}{x^n}$$</p><p>但如果它偷偷幫自己在分母 $+1$ 的話：</p><p>$$\int \frac{dx}{x^n + 1}$$</p><p>你會發現，用部份積分、變數變換、費曼積分法、複數線積分都做不出來。</p><blockquote><p>p.s. 用複數線積分當然做不出來，因為那是解瑕積分時才會用到的，當時不知道的筆者還特地為了這個問題去碰了複變 OwO。</p></blockquote><p>用泰勒展開固然可以解，但那會變成非封閉形式的解，身為數學完美主義者的筆者當然是想要得到封閉形式的解。</p><h3 id="所以要怎麼解這個積分呢？">所以要怎麼解這個積分呢？</h3><p>這時候，就要回歸到最初的技巧 - <strong>部份分式</strong>！<br>特地觀察這個積分的分母 $x^n + 1$ 後，會發現它如果要拆解成數個 $x-\omega_i$ （$\omega_i$ 是 $x^n + 1 = 0$ 的第 $i$ 個根，總共 $n$ 個） 相乘的型式的話，其中的 $\omega_i$ 幾乎都是複數。<br>所以，我們可以導出以下等式：</p><p>$$\begin{align*}\frac{1}{x^n + 1}&=\prod_{i=1}^{n}\frac{1}{x-\omega_i}\\&=\sum_{i=1}^{n}\frac{c_i}{x-\omega_i}\end{align*}$$</p><p>但這時我們並不知道其中的 $c_i$ 甚麼，因此需要先引進一個我稱之為 <strong>一階部份分式封閉型式展開式</strong> 的超級有用公式：</p><p>$$\frac{f}{g} = \sum_{\omega\in \mathbb{Z}_g}\left(\frac{f(u)}{g'(u)}\biggm\vert_{u=\omega}\cdot\frac{1}{x-\omega}\right)$$</p><p>不過使用它的條件也很嚴苛：</p><p>$$\begin{align*}&1.\quad \partial f < \partial g \\&2.\quad \forall\ \omega\in \mathbb{Z}_g,\ \partial\omega = 1 \\&3.\quad \mathbb{Z}_f\ \cap\ \mathbb{Z}_g = \emptyset \\\end{align*}$$</p><p>這邊的 $\mathbb{Z}_f,\ \mathbb{Z}_g$ 指的就是 $f,\ g$ 的零點集（就是所有不重複的根所形成的集合）。<br>用白話文說明一下這三點：</p><ol><li>$f$ 的次方要小於 $g$ 的次方</li><li>用部份分式所展開 $g$ 的所有根的都不可以是一以上的重根</li><li>$f$ 和 $g$ 不行有相同的根</li></ol><p>以下是 <strong>一階部份分式封閉型式展開式</strong> 的推導，覺得太長可以跳過。</p><div class="note note-secondary">            <p>首先，規則 1. 要成立，因為如果 $f$ 的次方大於 $g$ 的次方的話就應該會有一個商式，要另外處裡。<br>接下來就是普通部份分式的第一步（這邊假設 $g$ 的次數是 $n$）：</p><p>$$\frac{f(x)}{\prod_{i=1}^{n}(x-\omega_i)} = \sum_{i=1}^{n}\frac{c_i}{x-\omega_i}$$</p><p>將兩邊分母約分，並比較之後可得：</p><p>$$f(x) = \sum_{i=1}^{n}\left(c_i\prod_{j\neq i}(x-\omega_j)\right)$$</p><p>我們將要解的目標設定為係數 $c_k$，所以先把不相關的全部移到左邊去（這邊容許筆者偷懶簡寫下標與上標）：</p><p>$$f(x) - \sum_{i\neq k}c_i\prod_{j\neq i}(x-\omega_j) = c_k\prod_{j\neq k}(x-\omega_j)$$</p><p>這時，右邊看起來很醜，所以我們將兩邊同乘 $x-\omega_k$：</p><p>$$\begin{align*}(x-\omega_k)\left(f(x) - \sum_{i\neq k}c_i\prod_{j\neq i}(x-\omega_j)\right) &= c_k(x-\omega_k)\prod_{j\neq k}(x-\omega_j)\\&=c_k\cdot g(x)\end{align*}$$</p><p>這時右邊好看多了。為了解 $c_k$，將 $g$ 除到左邊下面：</p><p>$$c_k = \frac{(x-\omega_k)\left(f(x) - \sum_{i\neq k}c_i\prod_{j\neq i}(x-\omega_j)\right)}{g(x)}$$</p><p>但現在還有奇怪的東西：</p><p>$$\sum_{i\neq k}c_i\prod_{j\neq i}(x-\omega_j)$$</p><p>注意：每一個 $\prod_{j\neq i}(x-\omega_j)$ 中都有 $x-\omega_k$。<br>因此要讓這個東西消失的話，我們可以玩個把戲：把兩邊的 $x$ 都趨近於 $\omega_k$</p><p>$$\lim_{x\to \omega_k} c_k = \lim_{x\to \omega_k} \frac{(x-\omega_k)\left(f(x) - \sum_{i\neq k}c_i\prod_{j\neq i}(x-\omega_j)\right)}{g(x)}$$</p><p>但有個問題，右邊的 $(x-\omega_k)$ 與 $g(x)$ 在 $x\to \omega_k$ 時都會變成 $0$。<br>因此這個極限也是 $\frac{0}{0}$ 的形式，這時候就可以引進羅必達法則了！</p><p>$$\begin{align*}\lim_{x\to \omega_k} \frac{(x-\omega_k)\left(f(x) - \sum_{i\neq k}c_i\prod_{j\neq i}(x-\omega_j)\right)}{g(x)} \overset{L'Hôpital}{=}& \lim_{x\to \omega_k} \frac{\left((x-\omega_k)\left(f(x) - \sum_{i\neq k}c_i\prod_{j\neq i}(x-\omega_j)\right)\right)'}{g'(x)}\\=& \lim_{x\to \omega_k} \frac{(x-\omega_k)'\left(f(x) - \sum_{i\neq k}c_i\prod_{j\neq i}(x-\omega_j)\right)+(x-\omega_k)\left(f(x) - \sum_{i\neq k}c_i\prod_{j\neq i}(x-\omega_j)\right)'}{g'(x)}\\=& \lim_{x\to \omega_k} \frac{\left(f(x) - \sum_{i\neq k}c_i\prod_{j\neq i}(x-\omega_j)\right)+(x-\omega_k)\left(f(x) - \sum_{i\neq k}c_i\prod_{j\neq i}(x-\omega_j)\right)'}{g'(x)}\end{align*}$$</p><p>其中分子左方的 $\sum_{i\neq k}c_i\prod_{j\neq i}(x-\omega_j)$ 與右方的 $(x-\omega_k)$ 在 $x\to \omega_k$ 時都會變成 $0$。<br>所以這個極限值等於</p><p>$$\begin{align*}&= \lim_{x\to \omega_k} \frac{\left(f(x) - \sum_{i\neq k}c_i\prod_{j\neq i}(x-\omega_j)\right)+(x-\omega_k)\left(f(x) - \sum_{i\neq k}c_i\prod_{j\neq i}(x-\omega_j)\right)'}{g'(x)}\\&= \lim_{x\to \omega_k} \frac{\left(f(x) - 0\right)+0\cdot\left(f(x) - \sum_{i\neq k}c_i\prod_{j\neq i}(x-\omega_j)\right)'}{g'(x)}\\&= \lim_{x\to \omega_k} \frac{f(x)}{g'(x)}\end{align*}$$</p><p>而依照規則 3.，$f(\omega_k)$ 不會是 $0$，因為 $f,\ g$ 沒有共同根。<br>另外，依照規則 2. $g$ 的每個根都是一階根，因此 $g’(\omega_k)$ 也不會是 $0$。我們得到：</p><p>$$\begin{align*}\lim_{x\to \omega_k} c_k &= \lim_{x\to \omega_k} \frac{f(x)}{g'(x)}\\&=\frac{f(u)}{g'(u)}\biggm\vert_{u=\omega_k}\end{align*}$$</p><p>左邊顯然不被 $x$ 極限取值影響，因此以下就是針對單個係數 $c_k$ 的結果，而對於任意其他的係數也是相同結果：</p><p>$$c_k =\frac{f(u)}{g'(u)}\Big|_{u=\omega_k}$$</p><p>最終，將這個結果塞回原本的展開式中，得到：</p><p>$$\frac{f}{g} = \sum_{\omega\in \mathbb{Z}_g}\left(\frac{f(u)}{g'(u)}\biggm\vert_{u=\omega}\cdot\frac{1}{x-\omega}\right)_\blacksquare$$</p>          </div><p>回到正題。<del>早上好台灣，</del>現在我們有 <strong>一階部份分式封閉型式展開式</strong>，可以來準備解這題積分了。</p><p>$$\begin{align*}\frac{1}{x^n + 1} &= \sum_{\omega^n + 1 = 0}\frac{1}{\left(u^n+1\right)'}\biggm\vert_{u=\omega}\frac{1}{x-\omega}\\&=\sum_{\omega^n + 1 = 0}\frac{1}{n\omega^{n-1}}\cdot \frac{1}{x-\omega}\end{align*}$$</p><p>而由已知條件 $\omega^n+1 = 0$，我們可以進一步化簡 $n\omega^{n-1}$：</p><p>$$\begin{align*}\omega^n+1&=0\\\omega^n&=-1\\\omega^{n-1}&=\frac{-1}{\omega}\end{align*}$$</p><p>所以，</p><p>$$\sum_{\omega^n + 1 = 0}\frac{1}{n\omega^{n-1}}\cdot \frac{1}{x-\omega} = \frac{-1}{n}\sum_{\omega^n + 1 = 0}\omega\cdot \frac{1}{x-\omega}$$</p><p>最後，只要把這個東西積分起來就好了：</p><p>$$\begin{align*}\int \frac{dx}{x^n+1}&=\int \frac{-1}{n}\sum_{\omega^n + 1 = 0}\omega\cdot \frac{1}{x-\omega}dx\\&=\frac{-1}{n}\sum_{\omega^n + 1 = 0}\omega \int \frac{1}{x-\omega}dx\\&=\frac{-1}{n}\sum_{\omega^n + 1 = 0}\omega\ln(x-\omega)+C\ _\blacksquare\end{align*}$$</p><h3 id="簡單驗證與要點">簡單驗證與要點</h3><p>在大一學微積分的時候，通常老師都會告訴你 $\int\frac{dx}{x-k}$ 積分後要加絕對值，變成</p><p>$$\ln\left|x-k\right|+C$$</p><p>但在這邊，算出來的結果卻不行加絕對值，因為我們處裡的東西有 <strong>複數</strong>。<br>不信的話，我們可以用 $n=2$ 驗證看看（結果應該會是 $\tan^{-1}(x)+C$）：</p><div class="note note-success">            <p>不加絕對值的版本</p><p>$$\begin{align*}\frac{-1}{2}\sum_{\omega^2 + 1 = 0}\omega\ln(x-\omega)+C &= -\frac{1}{2}\left(i\cdot\ln(x-i)+(-i)\cdot\ln(x-(-i)) \right)+C\\&=-\frac{i}{2}\left( \ln(x-i)-\ln(x+i)\right)+C\\&=\frac{i}{2}\left( \ln(x+i)-\ln(x-i)\right)+C\\&=\frac{i}{2}\ln\left(\frac{x+i}{x-i}\right)+C\\&=\frac{i}{2}\ln\left(\frac{i+x}{i-x}\right)+C'\\\end{align*}$$</p>          </div><div class="note note-warning">            <p>加絕對值的版本</p><p>$$\begin{align*}\frac{-1}{2}\sum_{\omega^2 + 1 = 0}\omega\ln|x-\omega|+C &= -\frac{1}{2}\left(i\cdot\ln|x-i|+(-i)\cdot\ln|x-(-i)| \right)+C\\&=-\frac{i}{2}\left( \ln|x-i|-\ln|x+i|\right)+C\\&=\frac{i}{2}\left( \ln|x+i|-\ln|x-i|\right)+C\\&=\frac{i}{2}\ln\left|\frac{x+i}{x-i}\right|+C\\&=\frac{i}{2}\ln\left|\frac{i+x}{i-x}\right|+C\\\end{align*}$$</p>          </div><p>最後，我們把 $\tan^{-1}(x)$ 在複變分析中的定義<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://zh.m.wikipedia.org/zh-tw/反正切#定義">[1]</span></a></sup>拿出來比對：</p><p>$$\tan^{-1}(x)=\frac{i}{2}\ln\left(\frac{i+x}{i-x}\right)$$</p><p>很明顯可以看出來，沒有加絕對值的結果才跟這個一樣。</p><p>或者也可以從反證的方式思考：<br>現在假設加絕對值的結果是對的，並代入任一實數，會變成兩個複數做運算後取絕對值（也就是取模長），這樣 $\ln$ 項就會變成一個實數。<br>任意實數乘上前面的 $\frac{i}{2}$ 結果都會是複數（除了如果那個實數是 $0$）。<br>但我們知道 $\tan^{-1}(x)$ 的值在代入實數時應該也要是實數，而這跟我們的結果矛盾，因此一開始的假設是錯的，也就是加絕對值後的結果並不是對的。</p><h2 id="困難版的積分（有理數）">困難版的積分（有理數）</h2><h3 id="過程大綱">過程大綱</h3><ol><li>變數變換</li><li>引入一階部份分式封閉型式展開式</li><li>分別處理餘與商函數</li><li>將結果合併</li><li>用已知條件進行簡化</li></ol><h3 id="詳細過程">詳細過程</h3><p>要解這個積分：</p><p>$$I(x)=\int\frac{dx}{x^{\frac{q}{p}}+1},\quad q,\ p\in\mathbb{Z}^+,\ \gcd(q, p) = 1$$</p><p>的話，首先要引進以 $u=x^{\frac{1}{p}}$ 為核心的變數變換：</p><p>$$\begin{align*}u&=x^{\frac{1}{p}}\\\Rightarrow \frac{du}{dx}&=\frac{1}{p}\cdot x^{\frac{1}{p}-1}\\\Rightarrow p\cdot x^{1-\frac{1}{p}}du&=dx\\\overset{u^p=x}{\Rightarrow}pu^{p-1}du&=dx\end{align*}$$</p><p>變換的結果：</p><p>$$p\int\frac{u^{p-1}}{u^q+1}du$$</p><p>觀察分子與分母都是一個有理多項式，此時便可引進在簡單版時同樣有用到的 <strong>一階部份分式封閉型式展開式</strong>。<br>但注意這邊的 $p-1$ 有可能會 $\geq$ $q$，會不滿足第一條規則，所以要分開討論：</p><p>$$\int\frac{f(x)}{g(x)}dx=\int Q(x)\, dx + \sum_{\omega\in\mathbb{Z}_g}\frac{R(\omega)}{g'(\omega)}\ln(x-\omega)+C$$</p><p>其中 $Q(x)$ 和 $R(x)$ 就是商式與餘式。</p><div class="note note-info">            <p>其一，當 $p-1 \lt q$ 時，$Q(x) = 0$，便可直接引進公式得到結果：</p><p>$$\begin{align*}\int\frac{u^{p-1}}{u^q+1}du&=p\sum_{\omega^{q}+1=0}\frac{\omega^{p-1}}{q\omega^{q-1}}\ln(u-\omega)+C,\ u=x^{\frac{1}{p}}\\&=\frac{p}{q}\sum_{\omega^q+1=0}\omega^{p-q}\ln(x^{\frac{1}{p}}-\omega)+C\\&=-\frac{p}{q}\sum_{\omega^q+1=0}\omega^{p}\ln(x^{\frac{1}{p}}-\omega)+C\\\end{align*}$$</p>          </div><div class="note note-warning">            <p>其二，當 $p-1 \ge q$ 時，我們便要計算 $Q(x),\ R(x)$ 分別是甚麼，最後再對其進行積分。<br>然而，對於 $Q(x),\ R(x)$，筆者目前除了用最簡單的慢慢除方式，想不到其他可行的方法。</p><blockquote><p>p.s. 之前筆者有寫出來一個要解 $n$ 維複數逆矩陣的解法，但那顯然太難了。</p></blockquote><p>為簡化運算過程，我們令 $p-1 = b,\ q = a$，這是我們的目標：</p><p>$$x^b=(x^a+1)Q(x)+R(x)$$</p><p>以下為過程：</p><p>$$\begin{align*}x^b&=(x^a+1)\cdot x^{b-a}-x^{b-a},\ b-a > a,\\x^{b-a}&=(x^a+1)\cdot x^{b-2a}-x^{b-2a},\ b-2a> a,\\&...\\x^{b-(n-1)a}&=(x^a+1)\cdot x^{b-na}-x^{b-na},\ b-na\geq a,\\x^{b-na}&=(x^a+1)\cdot x^{b-(n+1)a}-x^{b-(n+1)a},\ b-(n+1)a < a,\\\end{align*}$$</p><p>這過程就是對每次試除一次之後的餘式繼續試除，直到最後沒辦法再除的時候（假設除了共 $n$ 次）停下。<br>而把這些試除之後得到的商全部加起來，可以得到下面的式子：</p><p>$$\Rightarrow x^b=(x^a+1)\left(x^{b-a}-x^{b-2a}+...+(-1)^{n}x^{b-(n+1)a}\right )-(-1)^{n}x^{b-(n+1)a}$$</p><p>而用 <strong>沒辦法再除</strong> 的這個條件，又可以得到自然限制，並解出 $n$：</p><p>$$\begin{alignat*}{3}b-(n+1)a &< a &&\leq b-na,\ a \neq 0\\\Rightarrow \frac{b}{a}-(n+1) &< 1 &&\leq \frac{b}{a}-n\\\Rightarrow \frac{b}{a}-1 &< n+1 &&\leq \frac{b}{a}\\\end{alignat*}\\\Rightarrow n+1=\left \lfloor \frac{b}{a}\right \rfloor\\$$</p><p>解出 $n$ 後，便可把上面的 $Q(x),\ R(x)$ 寫成封閉形式：</p><p>$$\begin{align*}Q(x)&=\sum_{k=1}^{n+1}(-1)^{k-1}x^{b-ka},\\R(x)&=-(-1)^{n}x^{b-(n+1)a}\\\end{align*}$$</p><p>最後，先把 $n+1$ 換回來：</p><p>$$n+1 = \left \lfloor \frac{b}{a}\right \rfloor = \left \lfloor \frac{p-1}{q}\right \rfloor = m$$</p><p>再解最後的積分：</p><p>$$\begin{align*}p\int\frac{u^{p-1}}{u^q+1}du&=p\left[\int\sum_{k=1}^{m}(-1)^{k-1}u^{(p-1)-kq}du+\sum_{\omega^{q}+1=0}\frac{(-1)^{m}x^{(p-1)-mq}}{\left(u^q+1\right)'}\biggm\vert_{u=\omega}\ln(u-\omega)\right]+C\\&=p\left[\sum_{k=1}^{m}(-1)^{k-1}\frac{u^{p-kq}}{p-kq}+(-1)^m\frac{1}{q}\sum_{\omega^q+1=0}\omega^{p-(m+1)q}\ln(u-\omega)\right]+C\\&=p\sum_{k=1}^{m}(-1)^{k-1}\frac{u^{p-kq}}{p-kq}+(-1)^m\frac{p}{q}\sum_{\omega^q+1=0}\omega^{p-(m+1)q}\ln(u-\omega)+C,\ u=x^{\frac{1}{p}}\\&=p\sum_{k=1}^{m}(-1)^{k-1}\frac{x^{1-k\frac{q}{p}}}{p-kq}+(-1)^m\frac{p}{q}\sum_{\omega^q+1=0}\omega^{p-(m+1)q}\ln(x^{\frac{1}{p}}-\omega)+C\\&=p\sum_{k=1}^{m}(-1)^{k-1}\frac{x^{1-k\frac{q}{p}}}{p-kq}-\frac{p}{q}\sum_{\omega^q+1=0}\omega^{p}\ln(x^{\frac{1}{p}}-\omega)+C\end{align*}$$</p>          </div><p>將上面兩個情況整合起來，就可以得到這個問題的最終答案：</p><p>$$\begin{align*}I(x)&=\int\frac{dx}{x^{\frac{q}{p}}+1}\\ \\&=\begin{cases}p\sum_{k=1}^{m}(-1)^{k-1}\frac{x^{1-k\frac{q}{p}}}{p-kq}-\frac{p}{q}\sum_{\omega^q+1=0}\omega^{p}\ln(x^{\frac{1}{p}}-\omega)+C,\ m=\left \lfloor \frac{p-1}{q} \right \rfloor & \text{ if } p\geq q+1\\-\frac{p}{q}\sum_{\omega^q+1=0}\omega^{p}\ln(x^{\frac{1}{p}}-\omega)+C & \text{ if } p< q+1\ _\blacksquare\end{cases}\end{align*}$$</p><p>恭喜，現在你也會解這兩個積分了！</p><hr><p>p.s. 寫到手快斷掉owo</p><h2 id="參考">參考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://zh.m.wikipedia.org/zh-tw/%E5%8F%8D%E6%AD%A3%E5%88%87#%E5%AE%9A%E7%BE%A9">https://zh.m.wikipedia.org/zh-tw/反正切#定義</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>mafs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/01/hello-world/"/>
    <url>/2023/01/hello-world/</url>
    
    <content type="html"><![CDATA[<!--lp:skip-all--><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
